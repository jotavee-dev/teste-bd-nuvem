
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model Users
 * 
 */
export type Users = $Result.DefaultSelection<Prisma.$UsersPayload>
/**
 * Model Cartao
 * 
 */
export type Cartao = $Result.DefaultSelection<Prisma.$CartaoPayload>
/**
 * Model Categoria
 * 
 */
export type Categoria = $Result.DefaultSelection<Prisma.$CategoriaPayload>
/**
 * Model Produtos
 * 
 */
export type Produtos = $Result.DefaultSelection<Prisma.$ProdutosPayload>
/**
 * Model ProdutosImg
 * 
 */
export type ProdutosImg = $Result.DefaultSelection<Prisma.$ProdutosImgPayload>
/**
 * Model CatProd
 * 
 */
export type CatProd = $Result.DefaultSelection<Prisma.$CatProdPayload>

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.users.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.users.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.users`: Exposes CRUD operations for the **Users** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.users.findMany()
    * ```
    */
  get users(): Prisma.UsersDelegate<ExtArgs>;

  /**
   * `prisma.cartao`: Exposes CRUD operations for the **Cartao** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Cartaos
    * const cartaos = await prisma.cartao.findMany()
    * ```
    */
  get cartao(): Prisma.CartaoDelegate<ExtArgs>;

  /**
   * `prisma.categoria`: Exposes CRUD operations for the **Categoria** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Categorias
    * const categorias = await prisma.categoria.findMany()
    * ```
    */
  get categoria(): Prisma.CategoriaDelegate<ExtArgs>;

  /**
   * `prisma.produtos`: Exposes CRUD operations for the **Produtos** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Produtos
    * const produtos = await prisma.produtos.findMany()
    * ```
    */
  get produtos(): Prisma.ProdutosDelegate<ExtArgs>;

  /**
   * `prisma.produtosImg`: Exposes CRUD operations for the **ProdutosImg** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ProdutosImgs
    * const produtosImgs = await prisma.produtosImg.findMany()
    * ```
    */
  get produtosImg(): Prisma.ProdutosImgDelegate<ExtArgs>;

  /**
   * `prisma.catProd`: Exposes CRUD operations for the **CatProd** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more CatProds
    * const catProds = await prisma.catProd.findMany()
    * ```
    */
  get catProd(): Prisma.CatProdDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 5.22.0
   * Query Engine version: 605197351a3c8bdd595af2d2a9bc3025bca48ea2
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    Users: 'Users',
    Cartao: 'Cartao',
    Categoria: 'Categoria',
    Produtos: 'Produtos',
    ProdutosImg: 'ProdutosImg',
    CatProd: 'CatProd'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs, clientOptions: PrismaClientOptions }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], this['params']['clientOptions']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> = {
    meta: {
      modelProps: "users" | "cartao" | "categoria" | "produtos" | "produtosImg" | "catProd"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      Users: {
        payload: Prisma.$UsersPayload<ExtArgs>
        fields: Prisma.UsersFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UsersFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsersPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UsersFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsersPayload>
          }
          findFirst: {
            args: Prisma.UsersFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsersPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UsersFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsersPayload>
          }
          findMany: {
            args: Prisma.UsersFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsersPayload>[]
          }
          create: {
            args: Prisma.UsersCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsersPayload>
          }
          createMany: {
            args: Prisma.UsersCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.UsersDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsersPayload>
          }
          update: {
            args: Prisma.UsersUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsersPayload>
          }
          deleteMany: {
            args: Prisma.UsersDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UsersUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.UsersUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsersPayload>
          }
          aggregate: {
            args: Prisma.UsersAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUsers>
          }
          groupBy: {
            args: Prisma.UsersGroupByArgs<ExtArgs>
            result: $Utils.Optional<UsersGroupByOutputType>[]
          }
          count: {
            args: Prisma.UsersCountArgs<ExtArgs>
            result: $Utils.Optional<UsersCountAggregateOutputType> | number
          }
        }
      }
      Cartao: {
        payload: Prisma.$CartaoPayload<ExtArgs>
        fields: Prisma.CartaoFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CartaoFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CartaoPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CartaoFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CartaoPayload>
          }
          findFirst: {
            args: Prisma.CartaoFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CartaoPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CartaoFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CartaoPayload>
          }
          findMany: {
            args: Prisma.CartaoFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CartaoPayload>[]
          }
          create: {
            args: Prisma.CartaoCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CartaoPayload>
          }
          createMany: {
            args: Prisma.CartaoCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.CartaoDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CartaoPayload>
          }
          update: {
            args: Prisma.CartaoUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CartaoPayload>
          }
          deleteMany: {
            args: Prisma.CartaoDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.CartaoUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.CartaoUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CartaoPayload>
          }
          aggregate: {
            args: Prisma.CartaoAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCartao>
          }
          groupBy: {
            args: Prisma.CartaoGroupByArgs<ExtArgs>
            result: $Utils.Optional<CartaoGroupByOutputType>[]
          }
          count: {
            args: Prisma.CartaoCountArgs<ExtArgs>
            result: $Utils.Optional<CartaoCountAggregateOutputType> | number
          }
        }
      }
      Categoria: {
        payload: Prisma.$CategoriaPayload<ExtArgs>
        fields: Prisma.CategoriaFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CategoriaFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoriaPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CategoriaFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoriaPayload>
          }
          findFirst: {
            args: Prisma.CategoriaFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoriaPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CategoriaFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoriaPayload>
          }
          findMany: {
            args: Prisma.CategoriaFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoriaPayload>[]
          }
          create: {
            args: Prisma.CategoriaCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoriaPayload>
          }
          createMany: {
            args: Prisma.CategoriaCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.CategoriaDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoriaPayload>
          }
          update: {
            args: Prisma.CategoriaUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoriaPayload>
          }
          deleteMany: {
            args: Prisma.CategoriaDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.CategoriaUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.CategoriaUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoriaPayload>
          }
          aggregate: {
            args: Prisma.CategoriaAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCategoria>
          }
          groupBy: {
            args: Prisma.CategoriaGroupByArgs<ExtArgs>
            result: $Utils.Optional<CategoriaGroupByOutputType>[]
          }
          count: {
            args: Prisma.CategoriaCountArgs<ExtArgs>
            result: $Utils.Optional<CategoriaCountAggregateOutputType> | number
          }
        }
      }
      Produtos: {
        payload: Prisma.$ProdutosPayload<ExtArgs>
        fields: Prisma.ProdutosFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ProdutosFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProdutosPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ProdutosFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProdutosPayload>
          }
          findFirst: {
            args: Prisma.ProdutosFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProdutosPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ProdutosFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProdutosPayload>
          }
          findMany: {
            args: Prisma.ProdutosFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProdutosPayload>[]
          }
          create: {
            args: Prisma.ProdutosCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProdutosPayload>
          }
          createMany: {
            args: Prisma.ProdutosCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.ProdutosDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProdutosPayload>
          }
          update: {
            args: Prisma.ProdutosUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProdutosPayload>
          }
          deleteMany: {
            args: Prisma.ProdutosDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ProdutosUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.ProdutosUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProdutosPayload>
          }
          aggregate: {
            args: Prisma.ProdutosAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateProdutos>
          }
          groupBy: {
            args: Prisma.ProdutosGroupByArgs<ExtArgs>
            result: $Utils.Optional<ProdutosGroupByOutputType>[]
          }
          count: {
            args: Prisma.ProdutosCountArgs<ExtArgs>
            result: $Utils.Optional<ProdutosCountAggregateOutputType> | number
          }
        }
      }
      ProdutosImg: {
        payload: Prisma.$ProdutosImgPayload<ExtArgs>
        fields: Prisma.ProdutosImgFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ProdutosImgFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProdutosImgPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ProdutosImgFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProdutosImgPayload>
          }
          findFirst: {
            args: Prisma.ProdutosImgFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProdutosImgPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ProdutosImgFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProdutosImgPayload>
          }
          findMany: {
            args: Prisma.ProdutosImgFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProdutosImgPayload>[]
          }
          create: {
            args: Prisma.ProdutosImgCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProdutosImgPayload>
          }
          createMany: {
            args: Prisma.ProdutosImgCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.ProdutosImgDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProdutosImgPayload>
          }
          update: {
            args: Prisma.ProdutosImgUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProdutosImgPayload>
          }
          deleteMany: {
            args: Prisma.ProdutosImgDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ProdutosImgUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.ProdutosImgUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProdutosImgPayload>
          }
          aggregate: {
            args: Prisma.ProdutosImgAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateProdutosImg>
          }
          groupBy: {
            args: Prisma.ProdutosImgGroupByArgs<ExtArgs>
            result: $Utils.Optional<ProdutosImgGroupByOutputType>[]
          }
          count: {
            args: Prisma.ProdutosImgCountArgs<ExtArgs>
            result: $Utils.Optional<ProdutosImgCountAggregateOutputType> | number
          }
        }
      }
      CatProd: {
        payload: Prisma.$CatProdPayload<ExtArgs>
        fields: Prisma.CatProdFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CatProdFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CatProdPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CatProdFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CatProdPayload>
          }
          findFirst: {
            args: Prisma.CatProdFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CatProdPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CatProdFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CatProdPayload>
          }
          findMany: {
            args: Prisma.CatProdFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CatProdPayload>[]
          }
          create: {
            args: Prisma.CatProdCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CatProdPayload>
          }
          createMany: {
            args: Prisma.CatProdCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.CatProdDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CatProdPayload>
          }
          update: {
            args: Prisma.CatProdUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CatProdPayload>
          }
          deleteMany: {
            args: Prisma.CatProdDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.CatProdUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.CatProdUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CatProdPayload>
          }
          aggregate: {
            args: Prisma.CatProdAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCatProd>
          }
          groupBy: {
            args: Prisma.CatProdGroupByArgs<ExtArgs>
            result: $Utils.Optional<CatProdGroupByOutputType>[]
          }
          count: {
            args: Prisma.CatProdCountArgs<ExtArgs>
            result: $Utils.Optional<CatProdCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
  }


  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */



  /**
   * Models
   */

  /**
   * Model Users
   */

  export type AggregateUsers = {
    _count: UsersCountAggregateOutputType | null
    _avg: UsersAvgAggregateOutputType | null
    _sum: UsersSumAggregateOutputType | null
    _min: UsersMinAggregateOutputType | null
    _max: UsersMaxAggregateOutputType | null
  }

  export type UsersAvgAggregateOutputType = {
    id: number | null
    cpf: number | null
    celular: number | null
    cep: number | null
  }

  export type UsersSumAggregateOutputType = {
    id: number | null
    cpf: number | null
    celular: number | null
    cep: number | null
  }

  export type UsersMinAggregateOutputType = {
    id: number | null
    nome: string | null
    email: string | null
    senha: string | null
    cpf: number | null
    celular: number | null
    endereco: string | null
    bairro: string | null
    cidade: string | null
    cep: number | null
    complemento: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UsersMaxAggregateOutputType = {
    id: number | null
    nome: string | null
    email: string | null
    senha: string | null
    cpf: number | null
    celular: number | null
    endereco: string | null
    bairro: string | null
    cidade: string | null
    cep: number | null
    complemento: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UsersCountAggregateOutputType = {
    id: number
    nome: number
    email: number
    senha: number
    cpf: number
    celular: number
    endereco: number
    bairro: number
    cidade: number
    cep: number
    complemento: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type UsersAvgAggregateInputType = {
    id?: true
    cpf?: true
    celular?: true
    cep?: true
  }

  export type UsersSumAggregateInputType = {
    id?: true
    cpf?: true
    celular?: true
    cep?: true
  }

  export type UsersMinAggregateInputType = {
    id?: true
    nome?: true
    email?: true
    senha?: true
    cpf?: true
    celular?: true
    endereco?: true
    bairro?: true
    cidade?: true
    cep?: true
    complemento?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UsersMaxAggregateInputType = {
    id?: true
    nome?: true
    email?: true
    senha?: true
    cpf?: true
    celular?: true
    endereco?: true
    bairro?: true
    cidade?: true
    cep?: true
    complemento?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UsersCountAggregateInputType = {
    id?: true
    nome?: true
    email?: true
    senha?: true
    cpf?: true
    celular?: true
    endereco?: true
    bairro?: true
    cidade?: true
    cep?: true
    complemento?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type UsersAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to aggregate.
     */
    where?: UsersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UsersOrderByWithRelationInput | UsersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UsersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UsersCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UsersAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UsersSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UsersMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UsersMaxAggregateInputType
  }

  export type GetUsersAggregateType<T extends UsersAggregateArgs> = {
        [P in keyof T & keyof AggregateUsers]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUsers[P]>
      : GetScalarType<T[P], AggregateUsers[P]>
  }




  export type UsersGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UsersWhereInput
    orderBy?: UsersOrderByWithAggregationInput | UsersOrderByWithAggregationInput[]
    by: UsersScalarFieldEnum[] | UsersScalarFieldEnum
    having?: UsersScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UsersCountAggregateInputType | true
    _avg?: UsersAvgAggregateInputType
    _sum?: UsersSumAggregateInputType
    _min?: UsersMinAggregateInputType
    _max?: UsersMaxAggregateInputType
  }

  export type UsersGroupByOutputType = {
    id: number
    nome: string
    email: string
    senha: string
    cpf: number
    celular: number
    endereco: string
    bairro: string
    cidade: string
    cep: number
    complemento: string | null
    createdAt: Date
    updatedAt: Date
    _count: UsersCountAggregateOutputType | null
    _avg: UsersAvgAggregateOutputType | null
    _sum: UsersSumAggregateOutputType | null
    _min: UsersMinAggregateOutputType | null
    _max: UsersMaxAggregateOutputType | null
  }

  type GetUsersGroupByPayload<T extends UsersGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UsersGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UsersGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UsersGroupByOutputType[P]>
            : GetScalarType<T[P], UsersGroupByOutputType[P]>
        }
      >
    >


  export type UsersSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nome?: boolean
    email?: boolean
    senha?: boolean
    cpf?: boolean
    celular?: boolean
    endereco?: boolean
    bairro?: boolean
    cidade?: boolean
    cep?: boolean
    complemento?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["users"]>


  export type UsersSelectScalar = {
    id?: boolean
    nome?: boolean
    email?: boolean
    senha?: boolean
    cpf?: boolean
    celular?: boolean
    endereco?: boolean
    bairro?: boolean
    cidade?: boolean
    cep?: boolean
    complemento?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }


  export type $UsersPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Users"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: number
      nome: string
      email: string
      senha: string
      cpf: number
      celular: number
      endereco: string
      bairro: string
      cidade: string
      cep: number
      complemento: string | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["users"]>
    composites: {}
  }

  type UsersGetPayload<S extends boolean | null | undefined | UsersDefaultArgs> = $Result.GetResult<Prisma.$UsersPayload, S>

  type UsersCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<UsersFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: UsersCountAggregateInputType | true
    }

  export interface UsersDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Users'], meta: { name: 'Users' } }
    /**
     * Find zero or one Users that matches the filter.
     * @param {UsersFindUniqueArgs} args - Arguments to find a Users
     * @example
     * // Get one Users
     * const users = await prisma.users.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UsersFindUniqueArgs>(args: SelectSubset<T, UsersFindUniqueArgs<ExtArgs>>): Prisma__UsersClient<$Result.GetResult<Prisma.$UsersPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Users that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {UsersFindUniqueOrThrowArgs} args - Arguments to find a Users
     * @example
     * // Get one Users
     * const users = await prisma.users.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UsersFindUniqueOrThrowArgs>(args: SelectSubset<T, UsersFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UsersClient<$Result.GetResult<Prisma.$UsersPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsersFindFirstArgs} args - Arguments to find a Users
     * @example
     * // Get one Users
     * const users = await prisma.users.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UsersFindFirstArgs>(args?: SelectSubset<T, UsersFindFirstArgs<ExtArgs>>): Prisma__UsersClient<$Result.GetResult<Prisma.$UsersPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Users that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsersFindFirstOrThrowArgs} args - Arguments to find a Users
     * @example
     * // Get one Users
     * const users = await prisma.users.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UsersFindFirstOrThrowArgs>(args?: SelectSubset<T, UsersFindFirstOrThrowArgs<ExtArgs>>): Prisma__UsersClient<$Result.GetResult<Prisma.$UsersPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsersFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.users.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.users.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const usersWithIdOnly = await prisma.users.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UsersFindManyArgs>(args?: SelectSubset<T, UsersFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UsersPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Users.
     * @param {UsersCreateArgs} args - Arguments to create a Users.
     * @example
     * // Create one Users
     * const Users = await prisma.users.create({
     *   data: {
     *     // ... data to create a Users
     *   }
     * })
     * 
     */
    create<T extends UsersCreateArgs>(args: SelectSubset<T, UsersCreateArgs<ExtArgs>>): Prisma__UsersClient<$Result.GetResult<Prisma.$UsersPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Users.
     * @param {UsersCreateManyArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const users = await prisma.users.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UsersCreateManyArgs>(args?: SelectSubset<T, UsersCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Users.
     * @param {UsersDeleteArgs} args - Arguments to delete one Users.
     * @example
     * // Delete one Users
     * const Users = await prisma.users.delete({
     *   where: {
     *     // ... filter to delete one Users
     *   }
     * })
     * 
     */
    delete<T extends UsersDeleteArgs>(args: SelectSubset<T, UsersDeleteArgs<ExtArgs>>): Prisma__UsersClient<$Result.GetResult<Prisma.$UsersPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Users.
     * @param {UsersUpdateArgs} args - Arguments to update one Users.
     * @example
     * // Update one Users
     * const users = await prisma.users.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UsersUpdateArgs>(args: SelectSubset<T, UsersUpdateArgs<ExtArgs>>): Prisma__UsersClient<$Result.GetResult<Prisma.$UsersPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Users.
     * @param {UsersDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.users.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UsersDeleteManyArgs>(args?: SelectSubset<T, UsersDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsersUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const users = await prisma.users.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UsersUpdateManyArgs>(args: SelectSubset<T, UsersUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Users.
     * @param {UsersUpsertArgs} args - Arguments to update or create a Users.
     * @example
     * // Update or create a Users
     * const users = await prisma.users.upsert({
     *   create: {
     *     // ... data to create a Users
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Users we want to update
     *   }
     * })
     */
    upsert<T extends UsersUpsertArgs>(args: SelectSubset<T, UsersUpsertArgs<ExtArgs>>): Prisma__UsersClient<$Result.GetResult<Prisma.$UsersPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsersCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.users.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UsersCountArgs>(
      args?: Subset<T, UsersCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UsersCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsersAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UsersAggregateArgs>(args: Subset<T, UsersAggregateArgs>): Prisma.PrismaPromise<GetUsersAggregateType<T>>

    /**
     * Group by Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsersGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UsersGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UsersGroupByArgs['orderBy'] }
        : { orderBy?: UsersGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UsersGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUsersGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Users model
   */
  readonly fields: UsersFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Users.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UsersClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Users model
   */ 
  interface UsersFieldRefs {
    readonly id: FieldRef<"Users", 'Int'>
    readonly nome: FieldRef<"Users", 'String'>
    readonly email: FieldRef<"Users", 'String'>
    readonly senha: FieldRef<"Users", 'String'>
    readonly cpf: FieldRef<"Users", 'Int'>
    readonly celular: FieldRef<"Users", 'Int'>
    readonly endereco: FieldRef<"Users", 'String'>
    readonly bairro: FieldRef<"Users", 'String'>
    readonly cidade: FieldRef<"Users", 'String'>
    readonly cep: FieldRef<"Users", 'Int'>
    readonly complemento: FieldRef<"Users", 'String'>
    readonly createdAt: FieldRef<"Users", 'DateTime'>
    readonly updatedAt: FieldRef<"Users", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Users findUnique
   */
  export type UsersFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Users
     */
    select?: UsersSelect<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where: UsersWhereUniqueInput
  }

  /**
   * Users findUniqueOrThrow
   */
  export type UsersFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Users
     */
    select?: UsersSelect<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where: UsersWhereUniqueInput
  }

  /**
   * Users findFirst
   */
  export type UsersFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Users
     */
    select?: UsersSelect<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UsersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UsersOrderByWithRelationInput | UsersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UsersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UsersScalarFieldEnum | UsersScalarFieldEnum[]
  }

  /**
   * Users findFirstOrThrow
   */
  export type UsersFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Users
     */
    select?: UsersSelect<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UsersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UsersOrderByWithRelationInput | UsersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UsersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UsersScalarFieldEnum | UsersScalarFieldEnum[]
  }

  /**
   * Users findMany
   */
  export type UsersFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Users
     */
    select?: UsersSelect<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UsersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UsersOrderByWithRelationInput | UsersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UsersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: UsersScalarFieldEnum | UsersScalarFieldEnum[]
  }

  /**
   * Users create
   */
  export type UsersCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Users
     */
    select?: UsersSelect<ExtArgs> | null
    /**
     * The data needed to create a Users.
     */
    data: XOR<UsersCreateInput, UsersUncheckedCreateInput>
  }

  /**
   * Users createMany
   */
  export type UsersCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Users.
     */
    data: UsersCreateManyInput | UsersCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Users update
   */
  export type UsersUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Users
     */
    select?: UsersSelect<ExtArgs> | null
    /**
     * The data needed to update a Users.
     */
    data: XOR<UsersUpdateInput, UsersUncheckedUpdateInput>
    /**
     * Choose, which Users to update.
     */
    where: UsersWhereUniqueInput
  }

  /**
   * Users updateMany
   */
  export type UsersUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UsersUpdateManyMutationInput, UsersUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UsersWhereInput
  }

  /**
   * Users upsert
   */
  export type UsersUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Users
     */
    select?: UsersSelect<ExtArgs> | null
    /**
     * The filter to search for the Users to update in case it exists.
     */
    where: UsersWhereUniqueInput
    /**
     * In case the Users found by the `where` argument doesn't exist, create a new Users with this data.
     */
    create: XOR<UsersCreateInput, UsersUncheckedCreateInput>
    /**
     * In case the Users was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UsersUpdateInput, UsersUncheckedUpdateInput>
  }

  /**
   * Users delete
   */
  export type UsersDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Users
     */
    select?: UsersSelect<ExtArgs> | null
    /**
     * Filter which Users to delete.
     */
    where: UsersWhereUniqueInput
  }

  /**
   * Users deleteMany
   */
  export type UsersDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UsersWhereInput
  }

  /**
   * Users without action
   */
  export type UsersDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Users
     */
    select?: UsersSelect<ExtArgs> | null
  }


  /**
   * Model Cartao
   */

  export type AggregateCartao = {
    _count: CartaoCountAggregateOutputType | null
    _avg: CartaoAvgAggregateOutputType | null
    _sum: CartaoSumAggregateOutputType | null
    _min: CartaoMinAggregateOutputType | null
    _max: CartaoMaxAggregateOutputType | null
  }

  export type CartaoAvgAggregateOutputType = {
    id: number | null
  }

  export type CartaoSumAggregateOutputType = {
    id: number | null
  }

  export type CartaoMinAggregateOutputType = {
    id: number | null
    cartao: string | null
    validade: string | null
    cvv: string | null
    nomeCartao: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type CartaoMaxAggregateOutputType = {
    id: number | null
    cartao: string | null
    validade: string | null
    cvv: string | null
    nomeCartao: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type CartaoCountAggregateOutputType = {
    id: number
    cartao: number
    validade: number
    cvv: number
    nomeCartao: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type CartaoAvgAggregateInputType = {
    id?: true
  }

  export type CartaoSumAggregateInputType = {
    id?: true
  }

  export type CartaoMinAggregateInputType = {
    id?: true
    cartao?: true
    validade?: true
    cvv?: true
    nomeCartao?: true
    createdAt?: true
    updatedAt?: true
  }

  export type CartaoMaxAggregateInputType = {
    id?: true
    cartao?: true
    validade?: true
    cvv?: true
    nomeCartao?: true
    createdAt?: true
    updatedAt?: true
  }

  export type CartaoCountAggregateInputType = {
    id?: true
    cartao?: true
    validade?: true
    cvv?: true
    nomeCartao?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type CartaoAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Cartao to aggregate.
     */
    where?: CartaoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Cartaos to fetch.
     */
    orderBy?: CartaoOrderByWithRelationInput | CartaoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CartaoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Cartaos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Cartaos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Cartaos
    **/
    _count?: true | CartaoCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CartaoAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CartaoSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CartaoMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CartaoMaxAggregateInputType
  }

  export type GetCartaoAggregateType<T extends CartaoAggregateArgs> = {
        [P in keyof T & keyof AggregateCartao]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCartao[P]>
      : GetScalarType<T[P], AggregateCartao[P]>
  }




  export type CartaoGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CartaoWhereInput
    orderBy?: CartaoOrderByWithAggregationInput | CartaoOrderByWithAggregationInput[]
    by: CartaoScalarFieldEnum[] | CartaoScalarFieldEnum
    having?: CartaoScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CartaoCountAggregateInputType | true
    _avg?: CartaoAvgAggregateInputType
    _sum?: CartaoSumAggregateInputType
    _min?: CartaoMinAggregateInputType
    _max?: CartaoMaxAggregateInputType
  }

  export type CartaoGroupByOutputType = {
    id: number
    cartao: string
    validade: string
    cvv: string
    nomeCartao: string
    createdAt: Date
    updatedAt: Date
    _count: CartaoCountAggregateOutputType | null
    _avg: CartaoAvgAggregateOutputType | null
    _sum: CartaoSumAggregateOutputType | null
    _min: CartaoMinAggregateOutputType | null
    _max: CartaoMaxAggregateOutputType | null
  }

  type GetCartaoGroupByPayload<T extends CartaoGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CartaoGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CartaoGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CartaoGroupByOutputType[P]>
            : GetScalarType<T[P], CartaoGroupByOutputType[P]>
        }
      >
    >


  export type CartaoSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    cartao?: boolean
    validade?: boolean
    cvv?: boolean
    nomeCartao?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["cartao"]>


  export type CartaoSelectScalar = {
    id?: boolean
    cartao?: boolean
    validade?: boolean
    cvv?: boolean
    nomeCartao?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }


  export type $CartaoPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Cartao"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: number
      cartao: string
      validade: string
      cvv: string
      nomeCartao: string
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["cartao"]>
    composites: {}
  }

  type CartaoGetPayload<S extends boolean | null | undefined | CartaoDefaultArgs> = $Result.GetResult<Prisma.$CartaoPayload, S>

  type CartaoCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<CartaoFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: CartaoCountAggregateInputType | true
    }

  export interface CartaoDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Cartao'], meta: { name: 'Cartao' } }
    /**
     * Find zero or one Cartao that matches the filter.
     * @param {CartaoFindUniqueArgs} args - Arguments to find a Cartao
     * @example
     * // Get one Cartao
     * const cartao = await prisma.cartao.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends CartaoFindUniqueArgs>(args: SelectSubset<T, CartaoFindUniqueArgs<ExtArgs>>): Prisma__CartaoClient<$Result.GetResult<Prisma.$CartaoPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Cartao that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {CartaoFindUniqueOrThrowArgs} args - Arguments to find a Cartao
     * @example
     * // Get one Cartao
     * const cartao = await prisma.cartao.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends CartaoFindUniqueOrThrowArgs>(args: SelectSubset<T, CartaoFindUniqueOrThrowArgs<ExtArgs>>): Prisma__CartaoClient<$Result.GetResult<Prisma.$CartaoPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Cartao that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CartaoFindFirstArgs} args - Arguments to find a Cartao
     * @example
     * // Get one Cartao
     * const cartao = await prisma.cartao.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends CartaoFindFirstArgs>(args?: SelectSubset<T, CartaoFindFirstArgs<ExtArgs>>): Prisma__CartaoClient<$Result.GetResult<Prisma.$CartaoPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Cartao that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CartaoFindFirstOrThrowArgs} args - Arguments to find a Cartao
     * @example
     * // Get one Cartao
     * const cartao = await prisma.cartao.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends CartaoFindFirstOrThrowArgs>(args?: SelectSubset<T, CartaoFindFirstOrThrowArgs<ExtArgs>>): Prisma__CartaoClient<$Result.GetResult<Prisma.$CartaoPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Cartaos that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CartaoFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Cartaos
     * const cartaos = await prisma.cartao.findMany()
     * 
     * // Get first 10 Cartaos
     * const cartaos = await prisma.cartao.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const cartaoWithIdOnly = await prisma.cartao.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends CartaoFindManyArgs>(args?: SelectSubset<T, CartaoFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CartaoPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Cartao.
     * @param {CartaoCreateArgs} args - Arguments to create a Cartao.
     * @example
     * // Create one Cartao
     * const Cartao = await prisma.cartao.create({
     *   data: {
     *     // ... data to create a Cartao
     *   }
     * })
     * 
     */
    create<T extends CartaoCreateArgs>(args: SelectSubset<T, CartaoCreateArgs<ExtArgs>>): Prisma__CartaoClient<$Result.GetResult<Prisma.$CartaoPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Cartaos.
     * @param {CartaoCreateManyArgs} args - Arguments to create many Cartaos.
     * @example
     * // Create many Cartaos
     * const cartao = await prisma.cartao.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends CartaoCreateManyArgs>(args?: SelectSubset<T, CartaoCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Cartao.
     * @param {CartaoDeleteArgs} args - Arguments to delete one Cartao.
     * @example
     * // Delete one Cartao
     * const Cartao = await prisma.cartao.delete({
     *   where: {
     *     // ... filter to delete one Cartao
     *   }
     * })
     * 
     */
    delete<T extends CartaoDeleteArgs>(args: SelectSubset<T, CartaoDeleteArgs<ExtArgs>>): Prisma__CartaoClient<$Result.GetResult<Prisma.$CartaoPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Cartao.
     * @param {CartaoUpdateArgs} args - Arguments to update one Cartao.
     * @example
     * // Update one Cartao
     * const cartao = await prisma.cartao.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends CartaoUpdateArgs>(args: SelectSubset<T, CartaoUpdateArgs<ExtArgs>>): Prisma__CartaoClient<$Result.GetResult<Prisma.$CartaoPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Cartaos.
     * @param {CartaoDeleteManyArgs} args - Arguments to filter Cartaos to delete.
     * @example
     * // Delete a few Cartaos
     * const { count } = await prisma.cartao.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends CartaoDeleteManyArgs>(args?: SelectSubset<T, CartaoDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Cartaos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CartaoUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Cartaos
     * const cartao = await prisma.cartao.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends CartaoUpdateManyArgs>(args: SelectSubset<T, CartaoUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Cartao.
     * @param {CartaoUpsertArgs} args - Arguments to update or create a Cartao.
     * @example
     * // Update or create a Cartao
     * const cartao = await prisma.cartao.upsert({
     *   create: {
     *     // ... data to create a Cartao
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Cartao we want to update
     *   }
     * })
     */
    upsert<T extends CartaoUpsertArgs>(args: SelectSubset<T, CartaoUpsertArgs<ExtArgs>>): Prisma__CartaoClient<$Result.GetResult<Prisma.$CartaoPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Cartaos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CartaoCountArgs} args - Arguments to filter Cartaos to count.
     * @example
     * // Count the number of Cartaos
     * const count = await prisma.cartao.count({
     *   where: {
     *     // ... the filter for the Cartaos we want to count
     *   }
     * })
    **/
    count<T extends CartaoCountArgs>(
      args?: Subset<T, CartaoCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CartaoCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Cartao.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CartaoAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CartaoAggregateArgs>(args: Subset<T, CartaoAggregateArgs>): Prisma.PrismaPromise<GetCartaoAggregateType<T>>

    /**
     * Group by Cartao.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CartaoGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CartaoGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CartaoGroupByArgs['orderBy'] }
        : { orderBy?: CartaoGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CartaoGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCartaoGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Cartao model
   */
  readonly fields: CartaoFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Cartao.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CartaoClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Cartao model
   */ 
  interface CartaoFieldRefs {
    readonly id: FieldRef<"Cartao", 'Int'>
    readonly cartao: FieldRef<"Cartao", 'String'>
    readonly validade: FieldRef<"Cartao", 'String'>
    readonly cvv: FieldRef<"Cartao", 'String'>
    readonly nomeCartao: FieldRef<"Cartao", 'String'>
    readonly createdAt: FieldRef<"Cartao", 'DateTime'>
    readonly updatedAt: FieldRef<"Cartao", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Cartao findUnique
   */
  export type CartaoFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Cartao
     */
    select?: CartaoSelect<ExtArgs> | null
    /**
     * Filter, which Cartao to fetch.
     */
    where: CartaoWhereUniqueInput
  }

  /**
   * Cartao findUniqueOrThrow
   */
  export type CartaoFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Cartao
     */
    select?: CartaoSelect<ExtArgs> | null
    /**
     * Filter, which Cartao to fetch.
     */
    where: CartaoWhereUniqueInput
  }

  /**
   * Cartao findFirst
   */
  export type CartaoFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Cartao
     */
    select?: CartaoSelect<ExtArgs> | null
    /**
     * Filter, which Cartao to fetch.
     */
    where?: CartaoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Cartaos to fetch.
     */
    orderBy?: CartaoOrderByWithRelationInput | CartaoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Cartaos.
     */
    cursor?: CartaoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Cartaos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Cartaos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Cartaos.
     */
    distinct?: CartaoScalarFieldEnum | CartaoScalarFieldEnum[]
  }

  /**
   * Cartao findFirstOrThrow
   */
  export type CartaoFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Cartao
     */
    select?: CartaoSelect<ExtArgs> | null
    /**
     * Filter, which Cartao to fetch.
     */
    where?: CartaoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Cartaos to fetch.
     */
    orderBy?: CartaoOrderByWithRelationInput | CartaoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Cartaos.
     */
    cursor?: CartaoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Cartaos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Cartaos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Cartaos.
     */
    distinct?: CartaoScalarFieldEnum | CartaoScalarFieldEnum[]
  }

  /**
   * Cartao findMany
   */
  export type CartaoFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Cartao
     */
    select?: CartaoSelect<ExtArgs> | null
    /**
     * Filter, which Cartaos to fetch.
     */
    where?: CartaoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Cartaos to fetch.
     */
    orderBy?: CartaoOrderByWithRelationInput | CartaoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Cartaos.
     */
    cursor?: CartaoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Cartaos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Cartaos.
     */
    skip?: number
    distinct?: CartaoScalarFieldEnum | CartaoScalarFieldEnum[]
  }

  /**
   * Cartao create
   */
  export type CartaoCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Cartao
     */
    select?: CartaoSelect<ExtArgs> | null
    /**
     * The data needed to create a Cartao.
     */
    data: XOR<CartaoCreateInput, CartaoUncheckedCreateInput>
  }

  /**
   * Cartao createMany
   */
  export type CartaoCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Cartaos.
     */
    data: CartaoCreateManyInput | CartaoCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Cartao update
   */
  export type CartaoUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Cartao
     */
    select?: CartaoSelect<ExtArgs> | null
    /**
     * The data needed to update a Cartao.
     */
    data: XOR<CartaoUpdateInput, CartaoUncheckedUpdateInput>
    /**
     * Choose, which Cartao to update.
     */
    where: CartaoWhereUniqueInput
  }

  /**
   * Cartao updateMany
   */
  export type CartaoUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Cartaos.
     */
    data: XOR<CartaoUpdateManyMutationInput, CartaoUncheckedUpdateManyInput>
    /**
     * Filter which Cartaos to update
     */
    where?: CartaoWhereInput
  }

  /**
   * Cartao upsert
   */
  export type CartaoUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Cartao
     */
    select?: CartaoSelect<ExtArgs> | null
    /**
     * The filter to search for the Cartao to update in case it exists.
     */
    where: CartaoWhereUniqueInput
    /**
     * In case the Cartao found by the `where` argument doesn't exist, create a new Cartao with this data.
     */
    create: XOR<CartaoCreateInput, CartaoUncheckedCreateInput>
    /**
     * In case the Cartao was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CartaoUpdateInput, CartaoUncheckedUpdateInput>
  }

  /**
   * Cartao delete
   */
  export type CartaoDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Cartao
     */
    select?: CartaoSelect<ExtArgs> | null
    /**
     * Filter which Cartao to delete.
     */
    where: CartaoWhereUniqueInput
  }

  /**
   * Cartao deleteMany
   */
  export type CartaoDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Cartaos to delete
     */
    where?: CartaoWhereInput
  }

  /**
   * Cartao without action
   */
  export type CartaoDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Cartao
     */
    select?: CartaoSelect<ExtArgs> | null
  }


  /**
   * Model Categoria
   */

  export type AggregateCategoria = {
    _count: CategoriaCountAggregateOutputType | null
    _avg: CategoriaAvgAggregateOutputType | null
    _sum: CategoriaSumAggregateOutputType | null
    _min: CategoriaMinAggregateOutputType | null
    _max: CategoriaMaxAggregateOutputType | null
  }

  export type CategoriaAvgAggregateOutputType = {
    id: number | null
  }

  export type CategoriaSumAggregateOutputType = {
    id: number | null
  }

  export type CategoriaMinAggregateOutputType = {
    id: number | null
    nome: string | null
    slug: string | null
  }

  export type CategoriaMaxAggregateOutputType = {
    id: number | null
    nome: string | null
    slug: string | null
  }

  export type CategoriaCountAggregateOutputType = {
    id: number
    nome: number
    slug: number
    _all: number
  }


  export type CategoriaAvgAggregateInputType = {
    id?: true
  }

  export type CategoriaSumAggregateInputType = {
    id?: true
  }

  export type CategoriaMinAggregateInputType = {
    id?: true
    nome?: true
    slug?: true
  }

  export type CategoriaMaxAggregateInputType = {
    id?: true
    nome?: true
    slug?: true
  }

  export type CategoriaCountAggregateInputType = {
    id?: true
    nome?: true
    slug?: true
    _all?: true
  }

  export type CategoriaAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Categoria to aggregate.
     */
    where?: CategoriaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Categorias to fetch.
     */
    orderBy?: CategoriaOrderByWithRelationInput | CategoriaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CategoriaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Categorias from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Categorias.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Categorias
    **/
    _count?: true | CategoriaCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CategoriaAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CategoriaSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CategoriaMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CategoriaMaxAggregateInputType
  }

  export type GetCategoriaAggregateType<T extends CategoriaAggregateArgs> = {
        [P in keyof T & keyof AggregateCategoria]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCategoria[P]>
      : GetScalarType<T[P], AggregateCategoria[P]>
  }




  export type CategoriaGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CategoriaWhereInput
    orderBy?: CategoriaOrderByWithAggregationInput | CategoriaOrderByWithAggregationInput[]
    by: CategoriaScalarFieldEnum[] | CategoriaScalarFieldEnum
    having?: CategoriaScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CategoriaCountAggregateInputType | true
    _avg?: CategoriaAvgAggregateInputType
    _sum?: CategoriaSumAggregateInputType
    _min?: CategoriaMinAggregateInputType
    _max?: CategoriaMaxAggregateInputType
  }

  export type CategoriaGroupByOutputType = {
    id: number
    nome: string
    slug: string
    _count: CategoriaCountAggregateOutputType | null
    _avg: CategoriaAvgAggregateOutputType | null
    _sum: CategoriaSumAggregateOutputType | null
    _min: CategoriaMinAggregateOutputType | null
    _max: CategoriaMaxAggregateOutputType | null
  }

  type GetCategoriaGroupByPayload<T extends CategoriaGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CategoriaGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CategoriaGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CategoriaGroupByOutputType[P]>
            : GetScalarType<T[P], CategoriaGroupByOutputType[P]>
        }
      >
    >


  export type CategoriaSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nome?: boolean
    slug?: boolean
    catprod?: boolean | Categoria$catprodArgs<ExtArgs>
  }, ExtArgs["result"]["categoria"]>


  export type CategoriaSelectScalar = {
    id?: boolean
    nome?: boolean
    slug?: boolean
  }

  export type CategoriaInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    catprod?: boolean | Categoria$catprodArgs<ExtArgs>
  }

  export type $CategoriaPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Categoria"
    objects: {
      catprod: Prisma.$CatProdPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      nome: string
      slug: string
    }, ExtArgs["result"]["categoria"]>
    composites: {}
  }

  type CategoriaGetPayload<S extends boolean | null | undefined | CategoriaDefaultArgs> = $Result.GetResult<Prisma.$CategoriaPayload, S>

  type CategoriaCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<CategoriaFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: CategoriaCountAggregateInputType | true
    }

  export interface CategoriaDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Categoria'], meta: { name: 'Categoria' } }
    /**
     * Find zero or one Categoria that matches the filter.
     * @param {CategoriaFindUniqueArgs} args - Arguments to find a Categoria
     * @example
     * // Get one Categoria
     * const categoria = await prisma.categoria.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends CategoriaFindUniqueArgs>(args: SelectSubset<T, CategoriaFindUniqueArgs<ExtArgs>>): Prisma__CategoriaClient<$Result.GetResult<Prisma.$CategoriaPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Categoria that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {CategoriaFindUniqueOrThrowArgs} args - Arguments to find a Categoria
     * @example
     * // Get one Categoria
     * const categoria = await prisma.categoria.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends CategoriaFindUniqueOrThrowArgs>(args: SelectSubset<T, CategoriaFindUniqueOrThrowArgs<ExtArgs>>): Prisma__CategoriaClient<$Result.GetResult<Prisma.$CategoriaPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Categoria that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoriaFindFirstArgs} args - Arguments to find a Categoria
     * @example
     * // Get one Categoria
     * const categoria = await prisma.categoria.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends CategoriaFindFirstArgs>(args?: SelectSubset<T, CategoriaFindFirstArgs<ExtArgs>>): Prisma__CategoriaClient<$Result.GetResult<Prisma.$CategoriaPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Categoria that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoriaFindFirstOrThrowArgs} args - Arguments to find a Categoria
     * @example
     * // Get one Categoria
     * const categoria = await prisma.categoria.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends CategoriaFindFirstOrThrowArgs>(args?: SelectSubset<T, CategoriaFindFirstOrThrowArgs<ExtArgs>>): Prisma__CategoriaClient<$Result.GetResult<Prisma.$CategoriaPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Categorias that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoriaFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Categorias
     * const categorias = await prisma.categoria.findMany()
     * 
     * // Get first 10 Categorias
     * const categorias = await prisma.categoria.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const categoriaWithIdOnly = await prisma.categoria.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends CategoriaFindManyArgs>(args?: SelectSubset<T, CategoriaFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CategoriaPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Categoria.
     * @param {CategoriaCreateArgs} args - Arguments to create a Categoria.
     * @example
     * // Create one Categoria
     * const Categoria = await prisma.categoria.create({
     *   data: {
     *     // ... data to create a Categoria
     *   }
     * })
     * 
     */
    create<T extends CategoriaCreateArgs>(args: SelectSubset<T, CategoriaCreateArgs<ExtArgs>>): Prisma__CategoriaClient<$Result.GetResult<Prisma.$CategoriaPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Categorias.
     * @param {CategoriaCreateManyArgs} args - Arguments to create many Categorias.
     * @example
     * // Create many Categorias
     * const categoria = await prisma.categoria.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends CategoriaCreateManyArgs>(args?: SelectSubset<T, CategoriaCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Categoria.
     * @param {CategoriaDeleteArgs} args - Arguments to delete one Categoria.
     * @example
     * // Delete one Categoria
     * const Categoria = await prisma.categoria.delete({
     *   where: {
     *     // ... filter to delete one Categoria
     *   }
     * })
     * 
     */
    delete<T extends CategoriaDeleteArgs>(args: SelectSubset<T, CategoriaDeleteArgs<ExtArgs>>): Prisma__CategoriaClient<$Result.GetResult<Prisma.$CategoriaPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Categoria.
     * @param {CategoriaUpdateArgs} args - Arguments to update one Categoria.
     * @example
     * // Update one Categoria
     * const categoria = await prisma.categoria.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends CategoriaUpdateArgs>(args: SelectSubset<T, CategoriaUpdateArgs<ExtArgs>>): Prisma__CategoriaClient<$Result.GetResult<Prisma.$CategoriaPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Categorias.
     * @param {CategoriaDeleteManyArgs} args - Arguments to filter Categorias to delete.
     * @example
     * // Delete a few Categorias
     * const { count } = await prisma.categoria.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends CategoriaDeleteManyArgs>(args?: SelectSubset<T, CategoriaDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Categorias.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoriaUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Categorias
     * const categoria = await prisma.categoria.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends CategoriaUpdateManyArgs>(args: SelectSubset<T, CategoriaUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Categoria.
     * @param {CategoriaUpsertArgs} args - Arguments to update or create a Categoria.
     * @example
     * // Update or create a Categoria
     * const categoria = await prisma.categoria.upsert({
     *   create: {
     *     // ... data to create a Categoria
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Categoria we want to update
     *   }
     * })
     */
    upsert<T extends CategoriaUpsertArgs>(args: SelectSubset<T, CategoriaUpsertArgs<ExtArgs>>): Prisma__CategoriaClient<$Result.GetResult<Prisma.$CategoriaPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Categorias.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoriaCountArgs} args - Arguments to filter Categorias to count.
     * @example
     * // Count the number of Categorias
     * const count = await prisma.categoria.count({
     *   where: {
     *     // ... the filter for the Categorias we want to count
     *   }
     * })
    **/
    count<T extends CategoriaCountArgs>(
      args?: Subset<T, CategoriaCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CategoriaCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Categoria.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoriaAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CategoriaAggregateArgs>(args: Subset<T, CategoriaAggregateArgs>): Prisma.PrismaPromise<GetCategoriaAggregateType<T>>

    /**
     * Group by Categoria.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoriaGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CategoriaGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CategoriaGroupByArgs['orderBy'] }
        : { orderBy?: CategoriaGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CategoriaGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCategoriaGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Categoria model
   */
  readonly fields: CategoriaFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Categoria.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CategoriaClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    catprod<T extends Categoria$catprodArgs<ExtArgs> = {}>(args?: Subset<T, Categoria$catprodArgs<ExtArgs>>): Prisma__CatProdClient<$Result.GetResult<Prisma.$CatProdPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Categoria model
   */ 
  interface CategoriaFieldRefs {
    readonly id: FieldRef<"Categoria", 'Int'>
    readonly nome: FieldRef<"Categoria", 'String'>
    readonly slug: FieldRef<"Categoria", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Categoria findUnique
   */
  export type CategoriaFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Categoria
     */
    select?: CategoriaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoriaInclude<ExtArgs> | null
    /**
     * Filter, which Categoria to fetch.
     */
    where: CategoriaWhereUniqueInput
  }

  /**
   * Categoria findUniqueOrThrow
   */
  export type CategoriaFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Categoria
     */
    select?: CategoriaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoriaInclude<ExtArgs> | null
    /**
     * Filter, which Categoria to fetch.
     */
    where: CategoriaWhereUniqueInput
  }

  /**
   * Categoria findFirst
   */
  export type CategoriaFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Categoria
     */
    select?: CategoriaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoriaInclude<ExtArgs> | null
    /**
     * Filter, which Categoria to fetch.
     */
    where?: CategoriaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Categorias to fetch.
     */
    orderBy?: CategoriaOrderByWithRelationInput | CategoriaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Categorias.
     */
    cursor?: CategoriaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Categorias from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Categorias.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Categorias.
     */
    distinct?: CategoriaScalarFieldEnum | CategoriaScalarFieldEnum[]
  }

  /**
   * Categoria findFirstOrThrow
   */
  export type CategoriaFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Categoria
     */
    select?: CategoriaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoriaInclude<ExtArgs> | null
    /**
     * Filter, which Categoria to fetch.
     */
    where?: CategoriaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Categorias to fetch.
     */
    orderBy?: CategoriaOrderByWithRelationInput | CategoriaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Categorias.
     */
    cursor?: CategoriaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Categorias from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Categorias.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Categorias.
     */
    distinct?: CategoriaScalarFieldEnum | CategoriaScalarFieldEnum[]
  }

  /**
   * Categoria findMany
   */
  export type CategoriaFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Categoria
     */
    select?: CategoriaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoriaInclude<ExtArgs> | null
    /**
     * Filter, which Categorias to fetch.
     */
    where?: CategoriaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Categorias to fetch.
     */
    orderBy?: CategoriaOrderByWithRelationInput | CategoriaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Categorias.
     */
    cursor?: CategoriaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Categorias from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Categorias.
     */
    skip?: number
    distinct?: CategoriaScalarFieldEnum | CategoriaScalarFieldEnum[]
  }

  /**
   * Categoria create
   */
  export type CategoriaCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Categoria
     */
    select?: CategoriaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoriaInclude<ExtArgs> | null
    /**
     * The data needed to create a Categoria.
     */
    data: XOR<CategoriaCreateInput, CategoriaUncheckedCreateInput>
  }

  /**
   * Categoria createMany
   */
  export type CategoriaCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Categorias.
     */
    data: CategoriaCreateManyInput | CategoriaCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Categoria update
   */
  export type CategoriaUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Categoria
     */
    select?: CategoriaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoriaInclude<ExtArgs> | null
    /**
     * The data needed to update a Categoria.
     */
    data: XOR<CategoriaUpdateInput, CategoriaUncheckedUpdateInput>
    /**
     * Choose, which Categoria to update.
     */
    where: CategoriaWhereUniqueInput
  }

  /**
   * Categoria updateMany
   */
  export type CategoriaUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Categorias.
     */
    data: XOR<CategoriaUpdateManyMutationInput, CategoriaUncheckedUpdateManyInput>
    /**
     * Filter which Categorias to update
     */
    where?: CategoriaWhereInput
  }

  /**
   * Categoria upsert
   */
  export type CategoriaUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Categoria
     */
    select?: CategoriaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoriaInclude<ExtArgs> | null
    /**
     * The filter to search for the Categoria to update in case it exists.
     */
    where: CategoriaWhereUniqueInput
    /**
     * In case the Categoria found by the `where` argument doesn't exist, create a new Categoria with this data.
     */
    create: XOR<CategoriaCreateInput, CategoriaUncheckedCreateInput>
    /**
     * In case the Categoria was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CategoriaUpdateInput, CategoriaUncheckedUpdateInput>
  }

  /**
   * Categoria delete
   */
  export type CategoriaDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Categoria
     */
    select?: CategoriaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoriaInclude<ExtArgs> | null
    /**
     * Filter which Categoria to delete.
     */
    where: CategoriaWhereUniqueInput
  }

  /**
   * Categoria deleteMany
   */
  export type CategoriaDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Categorias to delete
     */
    where?: CategoriaWhereInput
  }

  /**
   * Categoria.catprod
   */
  export type Categoria$catprodArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CatProd
     */
    select?: CatProdSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CatProdInclude<ExtArgs> | null
    where?: CatProdWhereInput
  }

  /**
   * Categoria without action
   */
  export type CategoriaDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Categoria
     */
    select?: CategoriaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoriaInclude<ExtArgs> | null
  }


  /**
   * Model Produtos
   */

  export type AggregateProdutos = {
    _count: ProdutosCountAggregateOutputType | null
    _avg: ProdutosAvgAggregateOutputType | null
    _sum: ProdutosSumAggregateOutputType | null
    _min: ProdutosMinAggregateOutputType | null
    _max: ProdutosMaxAggregateOutputType | null
  }

  export type ProdutosAvgAggregateOutputType = {
    id: number | null
  }

  export type ProdutosSumAggregateOutputType = {
    id: number | null
  }

  export type ProdutosMinAggregateOutputType = {
    id: number | null
    enabled: boolean | null
    nome: string | null
    slug: string | null
    estoque: string | null
    descricao: string | null
    preco: string | null
    preco_desconto: string | null
    desconto_off: string | null
  }

  export type ProdutosMaxAggregateOutputType = {
    id: number | null
    enabled: boolean | null
    nome: string | null
    slug: string | null
    estoque: string | null
    descricao: string | null
    preco: string | null
    preco_desconto: string | null
    desconto_off: string | null
  }

  export type ProdutosCountAggregateOutputType = {
    id: number
    enabled: number
    nome: number
    slug: number
    estoque: number
    descricao: number
    preco: number
    preco_desconto: number
    desconto_off: number
    _all: number
  }


  export type ProdutosAvgAggregateInputType = {
    id?: true
  }

  export type ProdutosSumAggregateInputType = {
    id?: true
  }

  export type ProdutosMinAggregateInputType = {
    id?: true
    enabled?: true
    nome?: true
    slug?: true
    estoque?: true
    descricao?: true
    preco?: true
    preco_desconto?: true
    desconto_off?: true
  }

  export type ProdutosMaxAggregateInputType = {
    id?: true
    enabled?: true
    nome?: true
    slug?: true
    estoque?: true
    descricao?: true
    preco?: true
    preco_desconto?: true
    desconto_off?: true
  }

  export type ProdutosCountAggregateInputType = {
    id?: true
    enabled?: true
    nome?: true
    slug?: true
    estoque?: true
    descricao?: true
    preco?: true
    preco_desconto?: true
    desconto_off?: true
    _all?: true
  }

  export type ProdutosAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Produtos to aggregate.
     */
    where?: ProdutosWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Produtos to fetch.
     */
    orderBy?: ProdutosOrderByWithRelationInput | ProdutosOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ProdutosWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Produtos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Produtos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Produtos
    **/
    _count?: true | ProdutosCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ProdutosAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ProdutosSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ProdutosMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ProdutosMaxAggregateInputType
  }

  export type GetProdutosAggregateType<T extends ProdutosAggregateArgs> = {
        [P in keyof T & keyof AggregateProdutos]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateProdutos[P]>
      : GetScalarType<T[P], AggregateProdutos[P]>
  }




  export type ProdutosGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProdutosWhereInput
    orderBy?: ProdutosOrderByWithAggregationInput | ProdutosOrderByWithAggregationInput[]
    by: ProdutosScalarFieldEnum[] | ProdutosScalarFieldEnum
    having?: ProdutosScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ProdutosCountAggregateInputType | true
    _avg?: ProdutosAvgAggregateInputType
    _sum?: ProdutosSumAggregateInputType
    _min?: ProdutosMinAggregateInputType
    _max?: ProdutosMaxAggregateInputType
  }

  export type ProdutosGroupByOutputType = {
    id: number
    enabled: boolean | null
    nome: string
    slug: string
    estoque: string
    descricao: string
    preco: string
    preco_desconto: string
    desconto_off: string
    _count: ProdutosCountAggregateOutputType | null
    _avg: ProdutosAvgAggregateOutputType | null
    _sum: ProdutosSumAggregateOutputType | null
    _min: ProdutosMinAggregateOutputType | null
    _max: ProdutosMaxAggregateOutputType | null
  }

  type GetProdutosGroupByPayload<T extends ProdutosGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ProdutosGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ProdutosGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ProdutosGroupByOutputType[P]>
            : GetScalarType<T[P], ProdutosGroupByOutputType[P]>
        }
      >
    >


  export type ProdutosSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    enabled?: boolean
    nome?: boolean
    slug?: boolean
    estoque?: boolean
    descricao?: boolean
    preco?: boolean
    preco_desconto?: boolean
    desconto_off?: boolean
    img?: boolean | Produtos$imgArgs<ExtArgs>
    catprod?: boolean | Produtos$catprodArgs<ExtArgs>
  }, ExtArgs["result"]["produtos"]>


  export type ProdutosSelectScalar = {
    id?: boolean
    enabled?: boolean
    nome?: boolean
    slug?: boolean
    estoque?: boolean
    descricao?: boolean
    preco?: boolean
    preco_desconto?: boolean
    desconto_off?: boolean
  }

  export type ProdutosInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    img?: boolean | Produtos$imgArgs<ExtArgs>
    catprod?: boolean | Produtos$catprodArgs<ExtArgs>
  }

  export type $ProdutosPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Produtos"
    objects: {
      img: Prisma.$ProdutosImgPayload<ExtArgs> | null
      catprod: Prisma.$CatProdPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      enabled: boolean | null
      nome: string
      slug: string
      estoque: string
      descricao: string
      preco: string
      preco_desconto: string
      desconto_off: string
    }, ExtArgs["result"]["produtos"]>
    composites: {}
  }

  type ProdutosGetPayload<S extends boolean | null | undefined | ProdutosDefaultArgs> = $Result.GetResult<Prisma.$ProdutosPayload, S>

  type ProdutosCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ProdutosFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ProdutosCountAggregateInputType | true
    }

  export interface ProdutosDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Produtos'], meta: { name: 'Produtos' } }
    /**
     * Find zero or one Produtos that matches the filter.
     * @param {ProdutosFindUniqueArgs} args - Arguments to find a Produtos
     * @example
     * // Get one Produtos
     * const produtos = await prisma.produtos.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ProdutosFindUniqueArgs>(args: SelectSubset<T, ProdutosFindUniqueArgs<ExtArgs>>): Prisma__ProdutosClient<$Result.GetResult<Prisma.$ProdutosPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Produtos that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {ProdutosFindUniqueOrThrowArgs} args - Arguments to find a Produtos
     * @example
     * // Get one Produtos
     * const produtos = await prisma.produtos.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ProdutosFindUniqueOrThrowArgs>(args: SelectSubset<T, ProdutosFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ProdutosClient<$Result.GetResult<Prisma.$ProdutosPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Produtos that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProdutosFindFirstArgs} args - Arguments to find a Produtos
     * @example
     * // Get one Produtos
     * const produtos = await prisma.produtos.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ProdutosFindFirstArgs>(args?: SelectSubset<T, ProdutosFindFirstArgs<ExtArgs>>): Prisma__ProdutosClient<$Result.GetResult<Prisma.$ProdutosPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Produtos that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProdutosFindFirstOrThrowArgs} args - Arguments to find a Produtos
     * @example
     * // Get one Produtos
     * const produtos = await prisma.produtos.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ProdutosFindFirstOrThrowArgs>(args?: SelectSubset<T, ProdutosFindFirstOrThrowArgs<ExtArgs>>): Prisma__ProdutosClient<$Result.GetResult<Prisma.$ProdutosPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Produtos that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProdutosFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Produtos
     * const produtos = await prisma.produtos.findMany()
     * 
     * // Get first 10 Produtos
     * const produtos = await prisma.produtos.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const produtosWithIdOnly = await prisma.produtos.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ProdutosFindManyArgs>(args?: SelectSubset<T, ProdutosFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProdutosPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Produtos.
     * @param {ProdutosCreateArgs} args - Arguments to create a Produtos.
     * @example
     * // Create one Produtos
     * const Produtos = await prisma.produtos.create({
     *   data: {
     *     // ... data to create a Produtos
     *   }
     * })
     * 
     */
    create<T extends ProdutosCreateArgs>(args: SelectSubset<T, ProdutosCreateArgs<ExtArgs>>): Prisma__ProdutosClient<$Result.GetResult<Prisma.$ProdutosPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Produtos.
     * @param {ProdutosCreateManyArgs} args - Arguments to create many Produtos.
     * @example
     * // Create many Produtos
     * const produtos = await prisma.produtos.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ProdutosCreateManyArgs>(args?: SelectSubset<T, ProdutosCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Produtos.
     * @param {ProdutosDeleteArgs} args - Arguments to delete one Produtos.
     * @example
     * // Delete one Produtos
     * const Produtos = await prisma.produtos.delete({
     *   where: {
     *     // ... filter to delete one Produtos
     *   }
     * })
     * 
     */
    delete<T extends ProdutosDeleteArgs>(args: SelectSubset<T, ProdutosDeleteArgs<ExtArgs>>): Prisma__ProdutosClient<$Result.GetResult<Prisma.$ProdutosPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Produtos.
     * @param {ProdutosUpdateArgs} args - Arguments to update one Produtos.
     * @example
     * // Update one Produtos
     * const produtos = await prisma.produtos.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ProdutosUpdateArgs>(args: SelectSubset<T, ProdutosUpdateArgs<ExtArgs>>): Prisma__ProdutosClient<$Result.GetResult<Prisma.$ProdutosPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Produtos.
     * @param {ProdutosDeleteManyArgs} args - Arguments to filter Produtos to delete.
     * @example
     * // Delete a few Produtos
     * const { count } = await prisma.produtos.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ProdutosDeleteManyArgs>(args?: SelectSubset<T, ProdutosDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Produtos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProdutosUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Produtos
     * const produtos = await prisma.produtos.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ProdutosUpdateManyArgs>(args: SelectSubset<T, ProdutosUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Produtos.
     * @param {ProdutosUpsertArgs} args - Arguments to update or create a Produtos.
     * @example
     * // Update or create a Produtos
     * const produtos = await prisma.produtos.upsert({
     *   create: {
     *     // ... data to create a Produtos
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Produtos we want to update
     *   }
     * })
     */
    upsert<T extends ProdutosUpsertArgs>(args: SelectSubset<T, ProdutosUpsertArgs<ExtArgs>>): Prisma__ProdutosClient<$Result.GetResult<Prisma.$ProdutosPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Produtos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProdutosCountArgs} args - Arguments to filter Produtos to count.
     * @example
     * // Count the number of Produtos
     * const count = await prisma.produtos.count({
     *   where: {
     *     // ... the filter for the Produtos we want to count
     *   }
     * })
    **/
    count<T extends ProdutosCountArgs>(
      args?: Subset<T, ProdutosCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ProdutosCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Produtos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProdutosAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ProdutosAggregateArgs>(args: Subset<T, ProdutosAggregateArgs>): Prisma.PrismaPromise<GetProdutosAggregateType<T>>

    /**
     * Group by Produtos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProdutosGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ProdutosGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ProdutosGroupByArgs['orderBy'] }
        : { orderBy?: ProdutosGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ProdutosGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetProdutosGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Produtos model
   */
  readonly fields: ProdutosFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Produtos.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ProdutosClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    img<T extends Produtos$imgArgs<ExtArgs> = {}>(args?: Subset<T, Produtos$imgArgs<ExtArgs>>): Prisma__ProdutosImgClient<$Result.GetResult<Prisma.$ProdutosImgPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    catprod<T extends Produtos$catprodArgs<ExtArgs> = {}>(args?: Subset<T, Produtos$catprodArgs<ExtArgs>>): Prisma__CatProdClient<$Result.GetResult<Prisma.$CatProdPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Produtos model
   */ 
  interface ProdutosFieldRefs {
    readonly id: FieldRef<"Produtos", 'Int'>
    readonly enabled: FieldRef<"Produtos", 'Boolean'>
    readonly nome: FieldRef<"Produtos", 'String'>
    readonly slug: FieldRef<"Produtos", 'String'>
    readonly estoque: FieldRef<"Produtos", 'String'>
    readonly descricao: FieldRef<"Produtos", 'String'>
    readonly preco: FieldRef<"Produtos", 'String'>
    readonly preco_desconto: FieldRef<"Produtos", 'String'>
    readonly desconto_off: FieldRef<"Produtos", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Produtos findUnique
   */
  export type ProdutosFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Produtos
     */
    select?: ProdutosSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProdutosInclude<ExtArgs> | null
    /**
     * Filter, which Produtos to fetch.
     */
    where: ProdutosWhereUniqueInput
  }

  /**
   * Produtos findUniqueOrThrow
   */
  export type ProdutosFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Produtos
     */
    select?: ProdutosSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProdutosInclude<ExtArgs> | null
    /**
     * Filter, which Produtos to fetch.
     */
    where: ProdutosWhereUniqueInput
  }

  /**
   * Produtos findFirst
   */
  export type ProdutosFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Produtos
     */
    select?: ProdutosSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProdutosInclude<ExtArgs> | null
    /**
     * Filter, which Produtos to fetch.
     */
    where?: ProdutosWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Produtos to fetch.
     */
    orderBy?: ProdutosOrderByWithRelationInput | ProdutosOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Produtos.
     */
    cursor?: ProdutosWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Produtos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Produtos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Produtos.
     */
    distinct?: ProdutosScalarFieldEnum | ProdutosScalarFieldEnum[]
  }

  /**
   * Produtos findFirstOrThrow
   */
  export type ProdutosFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Produtos
     */
    select?: ProdutosSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProdutosInclude<ExtArgs> | null
    /**
     * Filter, which Produtos to fetch.
     */
    where?: ProdutosWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Produtos to fetch.
     */
    orderBy?: ProdutosOrderByWithRelationInput | ProdutosOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Produtos.
     */
    cursor?: ProdutosWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Produtos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Produtos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Produtos.
     */
    distinct?: ProdutosScalarFieldEnum | ProdutosScalarFieldEnum[]
  }

  /**
   * Produtos findMany
   */
  export type ProdutosFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Produtos
     */
    select?: ProdutosSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProdutosInclude<ExtArgs> | null
    /**
     * Filter, which Produtos to fetch.
     */
    where?: ProdutosWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Produtos to fetch.
     */
    orderBy?: ProdutosOrderByWithRelationInput | ProdutosOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Produtos.
     */
    cursor?: ProdutosWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Produtos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Produtos.
     */
    skip?: number
    distinct?: ProdutosScalarFieldEnum | ProdutosScalarFieldEnum[]
  }

  /**
   * Produtos create
   */
  export type ProdutosCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Produtos
     */
    select?: ProdutosSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProdutosInclude<ExtArgs> | null
    /**
     * The data needed to create a Produtos.
     */
    data: XOR<ProdutosCreateInput, ProdutosUncheckedCreateInput>
  }

  /**
   * Produtos createMany
   */
  export type ProdutosCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Produtos.
     */
    data: ProdutosCreateManyInput | ProdutosCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Produtos update
   */
  export type ProdutosUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Produtos
     */
    select?: ProdutosSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProdutosInclude<ExtArgs> | null
    /**
     * The data needed to update a Produtos.
     */
    data: XOR<ProdutosUpdateInput, ProdutosUncheckedUpdateInput>
    /**
     * Choose, which Produtos to update.
     */
    where: ProdutosWhereUniqueInput
  }

  /**
   * Produtos updateMany
   */
  export type ProdutosUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Produtos.
     */
    data: XOR<ProdutosUpdateManyMutationInput, ProdutosUncheckedUpdateManyInput>
    /**
     * Filter which Produtos to update
     */
    where?: ProdutosWhereInput
  }

  /**
   * Produtos upsert
   */
  export type ProdutosUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Produtos
     */
    select?: ProdutosSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProdutosInclude<ExtArgs> | null
    /**
     * The filter to search for the Produtos to update in case it exists.
     */
    where: ProdutosWhereUniqueInput
    /**
     * In case the Produtos found by the `where` argument doesn't exist, create a new Produtos with this data.
     */
    create: XOR<ProdutosCreateInput, ProdutosUncheckedCreateInput>
    /**
     * In case the Produtos was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ProdutosUpdateInput, ProdutosUncheckedUpdateInput>
  }

  /**
   * Produtos delete
   */
  export type ProdutosDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Produtos
     */
    select?: ProdutosSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProdutosInclude<ExtArgs> | null
    /**
     * Filter which Produtos to delete.
     */
    where: ProdutosWhereUniqueInput
  }

  /**
   * Produtos deleteMany
   */
  export type ProdutosDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Produtos to delete
     */
    where?: ProdutosWhereInput
  }

  /**
   * Produtos.img
   */
  export type Produtos$imgArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProdutosImg
     */
    select?: ProdutosImgSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProdutosImgInclude<ExtArgs> | null
    where?: ProdutosImgWhereInput
  }

  /**
   * Produtos.catprod
   */
  export type Produtos$catprodArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CatProd
     */
    select?: CatProdSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CatProdInclude<ExtArgs> | null
    where?: CatProdWhereInput
  }

  /**
   * Produtos without action
   */
  export type ProdutosDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Produtos
     */
    select?: ProdutosSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProdutosInclude<ExtArgs> | null
  }


  /**
   * Model ProdutosImg
   */

  export type AggregateProdutosImg = {
    _count: ProdutosImgCountAggregateOutputType | null
    _avg: ProdutosImgAvgAggregateOutputType | null
    _sum: ProdutosImgSumAggregateOutputType | null
    _min: ProdutosImgMinAggregateOutputType | null
    _max: ProdutosImgMaxAggregateOutputType | null
  }

  export type ProdutosImgAvgAggregateOutputType = {
    id: number | null
    product_id: number | null
  }

  export type ProdutosImgSumAggregateOutputType = {
    id: number | null
    product_id: number | null
  }

  export type ProdutosImgMinAggregateOutputType = {
    id: number | null
    product_id: number | null
    path: string | null
  }

  export type ProdutosImgMaxAggregateOutputType = {
    id: number | null
    product_id: number | null
    path: string | null
  }

  export type ProdutosImgCountAggregateOutputType = {
    id: number
    product_id: number
    path: number
    _all: number
  }


  export type ProdutosImgAvgAggregateInputType = {
    id?: true
    product_id?: true
  }

  export type ProdutosImgSumAggregateInputType = {
    id?: true
    product_id?: true
  }

  export type ProdutosImgMinAggregateInputType = {
    id?: true
    product_id?: true
    path?: true
  }

  export type ProdutosImgMaxAggregateInputType = {
    id?: true
    product_id?: true
    path?: true
  }

  export type ProdutosImgCountAggregateInputType = {
    id?: true
    product_id?: true
    path?: true
    _all?: true
  }

  export type ProdutosImgAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ProdutosImg to aggregate.
     */
    where?: ProdutosImgWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ProdutosImgs to fetch.
     */
    orderBy?: ProdutosImgOrderByWithRelationInput | ProdutosImgOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ProdutosImgWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ProdutosImgs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ProdutosImgs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ProdutosImgs
    **/
    _count?: true | ProdutosImgCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ProdutosImgAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ProdutosImgSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ProdutosImgMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ProdutosImgMaxAggregateInputType
  }

  export type GetProdutosImgAggregateType<T extends ProdutosImgAggregateArgs> = {
        [P in keyof T & keyof AggregateProdutosImg]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateProdutosImg[P]>
      : GetScalarType<T[P], AggregateProdutosImg[P]>
  }




  export type ProdutosImgGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProdutosImgWhereInput
    orderBy?: ProdutosImgOrderByWithAggregationInput | ProdutosImgOrderByWithAggregationInput[]
    by: ProdutosImgScalarFieldEnum[] | ProdutosImgScalarFieldEnum
    having?: ProdutosImgScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ProdutosImgCountAggregateInputType | true
    _avg?: ProdutosImgAvgAggregateInputType
    _sum?: ProdutosImgSumAggregateInputType
    _min?: ProdutosImgMinAggregateInputType
    _max?: ProdutosImgMaxAggregateInputType
  }

  export type ProdutosImgGroupByOutputType = {
    id: number
    product_id: number
    path: string
    _count: ProdutosImgCountAggregateOutputType | null
    _avg: ProdutosImgAvgAggregateOutputType | null
    _sum: ProdutosImgSumAggregateOutputType | null
    _min: ProdutosImgMinAggregateOutputType | null
    _max: ProdutosImgMaxAggregateOutputType | null
  }

  type GetProdutosImgGroupByPayload<T extends ProdutosImgGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ProdutosImgGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ProdutosImgGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ProdutosImgGroupByOutputType[P]>
            : GetScalarType<T[P], ProdutosImgGroupByOutputType[P]>
        }
      >
    >


  export type ProdutosImgSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    product_id?: boolean
    path?: boolean
    product?: boolean | ProdutosDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["produtosImg"]>


  export type ProdutosImgSelectScalar = {
    id?: boolean
    product_id?: boolean
    path?: boolean
  }

  export type ProdutosImgInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    product?: boolean | ProdutosDefaultArgs<ExtArgs>
  }

  export type $ProdutosImgPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ProdutosImg"
    objects: {
      product: Prisma.$ProdutosPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      product_id: number
      path: string
    }, ExtArgs["result"]["produtosImg"]>
    composites: {}
  }

  type ProdutosImgGetPayload<S extends boolean | null | undefined | ProdutosImgDefaultArgs> = $Result.GetResult<Prisma.$ProdutosImgPayload, S>

  type ProdutosImgCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ProdutosImgFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ProdutosImgCountAggregateInputType | true
    }

  export interface ProdutosImgDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ProdutosImg'], meta: { name: 'ProdutosImg' } }
    /**
     * Find zero or one ProdutosImg that matches the filter.
     * @param {ProdutosImgFindUniqueArgs} args - Arguments to find a ProdutosImg
     * @example
     * // Get one ProdutosImg
     * const produtosImg = await prisma.produtosImg.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ProdutosImgFindUniqueArgs>(args: SelectSubset<T, ProdutosImgFindUniqueArgs<ExtArgs>>): Prisma__ProdutosImgClient<$Result.GetResult<Prisma.$ProdutosImgPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one ProdutosImg that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {ProdutosImgFindUniqueOrThrowArgs} args - Arguments to find a ProdutosImg
     * @example
     * // Get one ProdutosImg
     * const produtosImg = await prisma.produtosImg.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ProdutosImgFindUniqueOrThrowArgs>(args: SelectSubset<T, ProdutosImgFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ProdutosImgClient<$Result.GetResult<Prisma.$ProdutosImgPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first ProdutosImg that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProdutosImgFindFirstArgs} args - Arguments to find a ProdutosImg
     * @example
     * // Get one ProdutosImg
     * const produtosImg = await prisma.produtosImg.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ProdutosImgFindFirstArgs>(args?: SelectSubset<T, ProdutosImgFindFirstArgs<ExtArgs>>): Prisma__ProdutosImgClient<$Result.GetResult<Prisma.$ProdutosImgPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first ProdutosImg that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProdutosImgFindFirstOrThrowArgs} args - Arguments to find a ProdutosImg
     * @example
     * // Get one ProdutosImg
     * const produtosImg = await prisma.produtosImg.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ProdutosImgFindFirstOrThrowArgs>(args?: SelectSubset<T, ProdutosImgFindFirstOrThrowArgs<ExtArgs>>): Prisma__ProdutosImgClient<$Result.GetResult<Prisma.$ProdutosImgPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more ProdutosImgs that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProdutosImgFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ProdutosImgs
     * const produtosImgs = await prisma.produtosImg.findMany()
     * 
     * // Get first 10 ProdutosImgs
     * const produtosImgs = await prisma.produtosImg.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const produtosImgWithIdOnly = await prisma.produtosImg.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ProdutosImgFindManyArgs>(args?: SelectSubset<T, ProdutosImgFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProdutosImgPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a ProdutosImg.
     * @param {ProdutosImgCreateArgs} args - Arguments to create a ProdutosImg.
     * @example
     * // Create one ProdutosImg
     * const ProdutosImg = await prisma.produtosImg.create({
     *   data: {
     *     // ... data to create a ProdutosImg
     *   }
     * })
     * 
     */
    create<T extends ProdutosImgCreateArgs>(args: SelectSubset<T, ProdutosImgCreateArgs<ExtArgs>>): Prisma__ProdutosImgClient<$Result.GetResult<Prisma.$ProdutosImgPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many ProdutosImgs.
     * @param {ProdutosImgCreateManyArgs} args - Arguments to create many ProdutosImgs.
     * @example
     * // Create many ProdutosImgs
     * const produtosImg = await prisma.produtosImg.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ProdutosImgCreateManyArgs>(args?: SelectSubset<T, ProdutosImgCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a ProdutosImg.
     * @param {ProdutosImgDeleteArgs} args - Arguments to delete one ProdutosImg.
     * @example
     * // Delete one ProdutosImg
     * const ProdutosImg = await prisma.produtosImg.delete({
     *   where: {
     *     // ... filter to delete one ProdutosImg
     *   }
     * })
     * 
     */
    delete<T extends ProdutosImgDeleteArgs>(args: SelectSubset<T, ProdutosImgDeleteArgs<ExtArgs>>): Prisma__ProdutosImgClient<$Result.GetResult<Prisma.$ProdutosImgPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one ProdutosImg.
     * @param {ProdutosImgUpdateArgs} args - Arguments to update one ProdutosImg.
     * @example
     * // Update one ProdutosImg
     * const produtosImg = await prisma.produtosImg.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ProdutosImgUpdateArgs>(args: SelectSubset<T, ProdutosImgUpdateArgs<ExtArgs>>): Prisma__ProdutosImgClient<$Result.GetResult<Prisma.$ProdutosImgPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more ProdutosImgs.
     * @param {ProdutosImgDeleteManyArgs} args - Arguments to filter ProdutosImgs to delete.
     * @example
     * // Delete a few ProdutosImgs
     * const { count } = await prisma.produtosImg.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ProdutosImgDeleteManyArgs>(args?: SelectSubset<T, ProdutosImgDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ProdutosImgs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProdutosImgUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ProdutosImgs
     * const produtosImg = await prisma.produtosImg.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ProdutosImgUpdateManyArgs>(args: SelectSubset<T, ProdutosImgUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one ProdutosImg.
     * @param {ProdutosImgUpsertArgs} args - Arguments to update or create a ProdutosImg.
     * @example
     * // Update or create a ProdutosImg
     * const produtosImg = await prisma.produtosImg.upsert({
     *   create: {
     *     // ... data to create a ProdutosImg
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ProdutosImg we want to update
     *   }
     * })
     */
    upsert<T extends ProdutosImgUpsertArgs>(args: SelectSubset<T, ProdutosImgUpsertArgs<ExtArgs>>): Prisma__ProdutosImgClient<$Result.GetResult<Prisma.$ProdutosImgPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of ProdutosImgs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProdutosImgCountArgs} args - Arguments to filter ProdutosImgs to count.
     * @example
     * // Count the number of ProdutosImgs
     * const count = await prisma.produtosImg.count({
     *   where: {
     *     // ... the filter for the ProdutosImgs we want to count
     *   }
     * })
    **/
    count<T extends ProdutosImgCountArgs>(
      args?: Subset<T, ProdutosImgCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ProdutosImgCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ProdutosImg.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProdutosImgAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ProdutosImgAggregateArgs>(args: Subset<T, ProdutosImgAggregateArgs>): Prisma.PrismaPromise<GetProdutosImgAggregateType<T>>

    /**
     * Group by ProdutosImg.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProdutosImgGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ProdutosImgGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ProdutosImgGroupByArgs['orderBy'] }
        : { orderBy?: ProdutosImgGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ProdutosImgGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetProdutosImgGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ProdutosImg model
   */
  readonly fields: ProdutosImgFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ProdutosImg.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ProdutosImgClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    product<T extends ProdutosDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ProdutosDefaultArgs<ExtArgs>>): Prisma__ProdutosClient<$Result.GetResult<Prisma.$ProdutosPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ProdutosImg model
   */ 
  interface ProdutosImgFieldRefs {
    readonly id: FieldRef<"ProdutosImg", 'Int'>
    readonly product_id: FieldRef<"ProdutosImg", 'Int'>
    readonly path: FieldRef<"ProdutosImg", 'String'>
  }
    

  // Custom InputTypes
  /**
   * ProdutosImg findUnique
   */
  export type ProdutosImgFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProdutosImg
     */
    select?: ProdutosImgSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProdutosImgInclude<ExtArgs> | null
    /**
     * Filter, which ProdutosImg to fetch.
     */
    where: ProdutosImgWhereUniqueInput
  }

  /**
   * ProdutosImg findUniqueOrThrow
   */
  export type ProdutosImgFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProdutosImg
     */
    select?: ProdutosImgSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProdutosImgInclude<ExtArgs> | null
    /**
     * Filter, which ProdutosImg to fetch.
     */
    where: ProdutosImgWhereUniqueInput
  }

  /**
   * ProdutosImg findFirst
   */
  export type ProdutosImgFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProdutosImg
     */
    select?: ProdutosImgSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProdutosImgInclude<ExtArgs> | null
    /**
     * Filter, which ProdutosImg to fetch.
     */
    where?: ProdutosImgWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ProdutosImgs to fetch.
     */
    orderBy?: ProdutosImgOrderByWithRelationInput | ProdutosImgOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ProdutosImgs.
     */
    cursor?: ProdutosImgWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ProdutosImgs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ProdutosImgs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ProdutosImgs.
     */
    distinct?: ProdutosImgScalarFieldEnum | ProdutosImgScalarFieldEnum[]
  }

  /**
   * ProdutosImg findFirstOrThrow
   */
  export type ProdutosImgFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProdutosImg
     */
    select?: ProdutosImgSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProdutosImgInclude<ExtArgs> | null
    /**
     * Filter, which ProdutosImg to fetch.
     */
    where?: ProdutosImgWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ProdutosImgs to fetch.
     */
    orderBy?: ProdutosImgOrderByWithRelationInput | ProdutosImgOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ProdutosImgs.
     */
    cursor?: ProdutosImgWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ProdutosImgs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ProdutosImgs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ProdutosImgs.
     */
    distinct?: ProdutosImgScalarFieldEnum | ProdutosImgScalarFieldEnum[]
  }

  /**
   * ProdutosImg findMany
   */
  export type ProdutosImgFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProdutosImg
     */
    select?: ProdutosImgSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProdutosImgInclude<ExtArgs> | null
    /**
     * Filter, which ProdutosImgs to fetch.
     */
    where?: ProdutosImgWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ProdutosImgs to fetch.
     */
    orderBy?: ProdutosImgOrderByWithRelationInput | ProdutosImgOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ProdutosImgs.
     */
    cursor?: ProdutosImgWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ProdutosImgs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ProdutosImgs.
     */
    skip?: number
    distinct?: ProdutosImgScalarFieldEnum | ProdutosImgScalarFieldEnum[]
  }

  /**
   * ProdutosImg create
   */
  export type ProdutosImgCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProdutosImg
     */
    select?: ProdutosImgSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProdutosImgInclude<ExtArgs> | null
    /**
     * The data needed to create a ProdutosImg.
     */
    data: XOR<ProdutosImgCreateInput, ProdutosImgUncheckedCreateInput>
  }

  /**
   * ProdutosImg createMany
   */
  export type ProdutosImgCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ProdutosImgs.
     */
    data: ProdutosImgCreateManyInput | ProdutosImgCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ProdutosImg update
   */
  export type ProdutosImgUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProdutosImg
     */
    select?: ProdutosImgSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProdutosImgInclude<ExtArgs> | null
    /**
     * The data needed to update a ProdutosImg.
     */
    data: XOR<ProdutosImgUpdateInput, ProdutosImgUncheckedUpdateInput>
    /**
     * Choose, which ProdutosImg to update.
     */
    where: ProdutosImgWhereUniqueInput
  }

  /**
   * ProdutosImg updateMany
   */
  export type ProdutosImgUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ProdutosImgs.
     */
    data: XOR<ProdutosImgUpdateManyMutationInput, ProdutosImgUncheckedUpdateManyInput>
    /**
     * Filter which ProdutosImgs to update
     */
    where?: ProdutosImgWhereInput
  }

  /**
   * ProdutosImg upsert
   */
  export type ProdutosImgUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProdutosImg
     */
    select?: ProdutosImgSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProdutosImgInclude<ExtArgs> | null
    /**
     * The filter to search for the ProdutosImg to update in case it exists.
     */
    where: ProdutosImgWhereUniqueInput
    /**
     * In case the ProdutosImg found by the `where` argument doesn't exist, create a new ProdutosImg with this data.
     */
    create: XOR<ProdutosImgCreateInput, ProdutosImgUncheckedCreateInput>
    /**
     * In case the ProdutosImg was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ProdutosImgUpdateInput, ProdutosImgUncheckedUpdateInput>
  }

  /**
   * ProdutosImg delete
   */
  export type ProdutosImgDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProdutosImg
     */
    select?: ProdutosImgSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProdutosImgInclude<ExtArgs> | null
    /**
     * Filter which ProdutosImg to delete.
     */
    where: ProdutosImgWhereUniqueInput
  }

  /**
   * ProdutosImg deleteMany
   */
  export type ProdutosImgDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ProdutosImgs to delete
     */
    where?: ProdutosImgWhereInput
  }

  /**
   * ProdutosImg without action
   */
  export type ProdutosImgDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProdutosImg
     */
    select?: ProdutosImgSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProdutosImgInclude<ExtArgs> | null
  }


  /**
   * Model CatProd
   */

  export type AggregateCatProd = {
    _count: CatProdCountAggregateOutputType | null
    _avg: CatProdAvgAggregateOutputType | null
    _sum: CatProdSumAggregateOutputType | null
    _min: CatProdMinAggregateOutputType | null
    _max: CatProdMaxAggregateOutputType | null
  }

  export type CatProdAvgAggregateOutputType = {
    id: number | null
    product_id: number | null
    categoria_id: number | null
  }

  export type CatProdSumAggregateOutputType = {
    id: number | null
    product_id: number | null
    categoria_id: number | null
  }

  export type CatProdMinAggregateOutputType = {
    id: number | null
    product_id: number | null
    categoria_id: number | null
  }

  export type CatProdMaxAggregateOutputType = {
    id: number | null
    product_id: number | null
    categoria_id: number | null
  }

  export type CatProdCountAggregateOutputType = {
    id: number
    product_id: number
    categoria_id: number
    _all: number
  }


  export type CatProdAvgAggregateInputType = {
    id?: true
    product_id?: true
    categoria_id?: true
  }

  export type CatProdSumAggregateInputType = {
    id?: true
    product_id?: true
    categoria_id?: true
  }

  export type CatProdMinAggregateInputType = {
    id?: true
    product_id?: true
    categoria_id?: true
  }

  export type CatProdMaxAggregateInputType = {
    id?: true
    product_id?: true
    categoria_id?: true
  }

  export type CatProdCountAggregateInputType = {
    id?: true
    product_id?: true
    categoria_id?: true
    _all?: true
  }

  export type CatProdAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which CatProd to aggregate.
     */
    where?: CatProdWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CatProds to fetch.
     */
    orderBy?: CatProdOrderByWithRelationInput | CatProdOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CatProdWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CatProds from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CatProds.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned CatProds
    **/
    _count?: true | CatProdCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CatProdAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CatProdSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CatProdMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CatProdMaxAggregateInputType
  }

  export type GetCatProdAggregateType<T extends CatProdAggregateArgs> = {
        [P in keyof T & keyof AggregateCatProd]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCatProd[P]>
      : GetScalarType<T[P], AggregateCatProd[P]>
  }




  export type CatProdGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CatProdWhereInput
    orderBy?: CatProdOrderByWithAggregationInput | CatProdOrderByWithAggregationInput[]
    by: CatProdScalarFieldEnum[] | CatProdScalarFieldEnum
    having?: CatProdScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CatProdCountAggregateInputType | true
    _avg?: CatProdAvgAggregateInputType
    _sum?: CatProdSumAggregateInputType
    _min?: CatProdMinAggregateInputType
    _max?: CatProdMaxAggregateInputType
  }

  export type CatProdGroupByOutputType = {
    id: number
    product_id: number
    categoria_id: number
    _count: CatProdCountAggregateOutputType | null
    _avg: CatProdAvgAggregateOutputType | null
    _sum: CatProdSumAggregateOutputType | null
    _min: CatProdMinAggregateOutputType | null
    _max: CatProdMaxAggregateOutputType | null
  }

  type GetCatProdGroupByPayload<T extends CatProdGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CatProdGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CatProdGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CatProdGroupByOutputType[P]>
            : GetScalarType<T[P], CatProdGroupByOutputType[P]>
        }
      >
    >


  export type CatProdSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    product_id?: boolean
    categoria_id?: boolean
    product?: boolean | ProdutosDefaultArgs<ExtArgs>
    categoria?: boolean | CategoriaDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["catProd"]>


  export type CatProdSelectScalar = {
    id?: boolean
    product_id?: boolean
    categoria_id?: boolean
  }

  export type CatProdInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    product?: boolean | ProdutosDefaultArgs<ExtArgs>
    categoria?: boolean | CategoriaDefaultArgs<ExtArgs>
  }

  export type $CatProdPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "CatProd"
    objects: {
      product: Prisma.$ProdutosPayload<ExtArgs>
      categoria: Prisma.$CategoriaPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      product_id: number
      categoria_id: number
    }, ExtArgs["result"]["catProd"]>
    composites: {}
  }

  type CatProdGetPayload<S extends boolean | null | undefined | CatProdDefaultArgs> = $Result.GetResult<Prisma.$CatProdPayload, S>

  type CatProdCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<CatProdFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: CatProdCountAggregateInputType | true
    }

  export interface CatProdDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['CatProd'], meta: { name: 'CatProd' } }
    /**
     * Find zero or one CatProd that matches the filter.
     * @param {CatProdFindUniqueArgs} args - Arguments to find a CatProd
     * @example
     * // Get one CatProd
     * const catProd = await prisma.catProd.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends CatProdFindUniqueArgs>(args: SelectSubset<T, CatProdFindUniqueArgs<ExtArgs>>): Prisma__CatProdClient<$Result.GetResult<Prisma.$CatProdPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one CatProd that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {CatProdFindUniqueOrThrowArgs} args - Arguments to find a CatProd
     * @example
     * // Get one CatProd
     * const catProd = await prisma.catProd.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends CatProdFindUniqueOrThrowArgs>(args: SelectSubset<T, CatProdFindUniqueOrThrowArgs<ExtArgs>>): Prisma__CatProdClient<$Result.GetResult<Prisma.$CatProdPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first CatProd that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CatProdFindFirstArgs} args - Arguments to find a CatProd
     * @example
     * // Get one CatProd
     * const catProd = await prisma.catProd.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends CatProdFindFirstArgs>(args?: SelectSubset<T, CatProdFindFirstArgs<ExtArgs>>): Prisma__CatProdClient<$Result.GetResult<Prisma.$CatProdPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first CatProd that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CatProdFindFirstOrThrowArgs} args - Arguments to find a CatProd
     * @example
     * // Get one CatProd
     * const catProd = await prisma.catProd.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends CatProdFindFirstOrThrowArgs>(args?: SelectSubset<T, CatProdFindFirstOrThrowArgs<ExtArgs>>): Prisma__CatProdClient<$Result.GetResult<Prisma.$CatProdPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more CatProds that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CatProdFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all CatProds
     * const catProds = await prisma.catProd.findMany()
     * 
     * // Get first 10 CatProds
     * const catProds = await prisma.catProd.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const catProdWithIdOnly = await prisma.catProd.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends CatProdFindManyArgs>(args?: SelectSubset<T, CatProdFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CatProdPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a CatProd.
     * @param {CatProdCreateArgs} args - Arguments to create a CatProd.
     * @example
     * // Create one CatProd
     * const CatProd = await prisma.catProd.create({
     *   data: {
     *     // ... data to create a CatProd
     *   }
     * })
     * 
     */
    create<T extends CatProdCreateArgs>(args: SelectSubset<T, CatProdCreateArgs<ExtArgs>>): Prisma__CatProdClient<$Result.GetResult<Prisma.$CatProdPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many CatProds.
     * @param {CatProdCreateManyArgs} args - Arguments to create many CatProds.
     * @example
     * // Create many CatProds
     * const catProd = await prisma.catProd.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends CatProdCreateManyArgs>(args?: SelectSubset<T, CatProdCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a CatProd.
     * @param {CatProdDeleteArgs} args - Arguments to delete one CatProd.
     * @example
     * // Delete one CatProd
     * const CatProd = await prisma.catProd.delete({
     *   where: {
     *     // ... filter to delete one CatProd
     *   }
     * })
     * 
     */
    delete<T extends CatProdDeleteArgs>(args: SelectSubset<T, CatProdDeleteArgs<ExtArgs>>): Prisma__CatProdClient<$Result.GetResult<Prisma.$CatProdPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one CatProd.
     * @param {CatProdUpdateArgs} args - Arguments to update one CatProd.
     * @example
     * // Update one CatProd
     * const catProd = await prisma.catProd.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends CatProdUpdateArgs>(args: SelectSubset<T, CatProdUpdateArgs<ExtArgs>>): Prisma__CatProdClient<$Result.GetResult<Prisma.$CatProdPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more CatProds.
     * @param {CatProdDeleteManyArgs} args - Arguments to filter CatProds to delete.
     * @example
     * // Delete a few CatProds
     * const { count } = await prisma.catProd.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends CatProdDeleteManyArgs>(args?: SelectSubset<T, CatProdDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more CatProds.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CatProdUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many CatProds
     * const catProd = await prisma.catProd.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends CatProdUpdateManyArgs>(args: SelectSubset<T, CatProdUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one CatProd.
     * @param {CatProdUpsertArgs} args - Arguments to update or create a CatProd.
     * @example
     * // Update or create a CatProd
     * const catProd = await prisma.catProd.upsert({
     *   create: {
     *     // ... data to create a CatProd
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the CatProd we want to update
     *   }
     * })
     */
    upsert<T extends CatProdUpsertArgs>(args: SelectSubset<T, CatProdUpsertArgs<ExtArgs>>): Prisma__CatProdClient<$Result.GetResult<Prisma.$CatProdPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of CatProds.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CatProdCountArgs} args - Arguments to filter CatProds to count.
     * @example
     * // Count the number of CatProds
     * const count = await prisma.catProd.count({
     *   where: {
     *     // ... the filter for the CatProds we want to count
     *   }
     * })
    **/
    count<T extends CatProdCountArgs>(
      args?: Subset<T, CatProdCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CatProdCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a CatProd.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CatProdAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CatProdAggregateArgs>(args: Subset<T, CatProdAggregateArgs>): Prisma.PrismaPromise<GetCatProdAggregateType<T>>

    /**
     * Group by CatProd.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CatProdGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CatProdGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CatProdGroupByArgs['orderBy'] }
        : { orderBy?: CatProdGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CatProdGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCatProdGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the CatProd model
   */
  readonly fields: CatProdFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for CatProd.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CatProdClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    product<T extends ProdutosDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ProdutosDefaultArgs<ExtArgs>>): Prisma__ProdutosClient<$Result.GetResult<Prisma.$ProdutosPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    categoria<T extends CategoriaDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CategoriaDefaultArgs<ExtArgs>>): Prisma__CategoriaClient<$Result.GetResult<Prisma.$CategoriaPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the CatProd model
   */ 
  interface CatProdFieldRefs {
    readonly id: FieldRef<"CatProd", 'Int'>
    readonly product_id: FieldRef<"CatProd", 'Int'>
    readonly categoria_id: FieldRef<"CatProd", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * CatProd findUnique
   */
  export type CatProdFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CatProd
     */
    select?: CatProdSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CatProdInclude<ExtArgs> | null
    /**
     * Filter, which CatProd to fetch.
     */
    where: CatProdWhereUniqueInput
  }

  /**
   * CatProd findUniqueOrThrow
   */
  export type CatProdFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CatProd
     */
    select?: CatProdSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CatProdInclude<ExtArgs> | null
    /**
     * Filter, which CatProd to fetch.
     */
    where: CatProdWhereUniqueInput
  }

  /**
   * CatProd findFirst
   */
  export type CatProdFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CatProd
     */
    select?: CatProdSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CatProdInclude<ExtArgs> | null
    /**
     * Filter, which CatProd to fetch.
     */
    where?: CatProdWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CatProds to fetch.
     */
    orderBy?: CatProdOrderByWithRelationInput | CatProdOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CatProds.
     */
    cursor?: CatProdWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CatProds from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CatProds.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CatProds.
     */
    distinct?: CatProdScalarFieldEnum | CatProdScalarFieldEnum[]
  }

  /**
   * CatProd findFirstOrThrow
   */
  export type CatProdFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CatProd
     */
    select?: CatProdSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CatProdInclude<ExtArgs> | null
    /**
     * Filter, which CatProd to fetch.
     */
    where?: CatProdWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CatProds to fetch.
     */
    orderBy?: CatProdOrderByWithRelationInput | CatProdOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CatProds.
     */
    cursor?: CatProdWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CatProds from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CatProds.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CatProds.
     */
    distinct?: CatProdScalarFieldEnum | CatProdScalarFieldEnum[]
  }

  /**
   * CatProd findMany
   */
  export type CatProdFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CatProd
     */
    select?: CatProdSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CatProdInclude<ExtArgs> | null
    /**
     * Filter, which CatProds to fetch.
     */
    where?: CatProdWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CatProds to fetch.
     */
    orderBy?: CatProdOrderByWithRelationInput | CatProdOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing CatProds.
     */
    cursor?: CatProdWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CatProds from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CatProds.
     */
    skip?: number
    distinct?: CatProdScalarFieldEnum | CatProdScalarFieldEnum[]
  }

  /**
   * CatProd create
   */
  export type CatProdCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CatProd
     */
    select?: CatProdSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CatProdInclude<ExtArgs> | null
    /**
     * The data needed to create a CatProd.
     */
    data: XOR<CatProdCreateInput, CatProdUncheckedCreateInput>
  }

  /**
   * CatProd createMany
   */
  export type CatProdCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many CatProds.
     */
    data: CatProdCreateManyInput | CatProdCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * CatProd update
   */
  export type CatProdUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CatProd
     */
    select?: CatProdSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CatProdInclude<ExtArgs> | null
    /**
     * The data needed to update a CatProd.
     */
    data: XOR<CatProdUpdateInput, CatProdUncheckedUpdateInput>
    /**
     * Choose, which CatProd to update.
     */
    where: CatProdWhereUniqueInput
  }

  /**
   * CatProd updateMany
   */
  export type CatProdUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update CatProds.
     */
    data: XOR<CatProdUpdateManyMutationInput, CatProdUncheckedUpdateManyInput>
    /**
     * Filter which CatProds to update
     */
    where?: CatProdWhereInput
  }

  /**
   * CatProd upsert
   */
  export type CatProdUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CatProd
     */
    select?: CatProdSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CatProdInclude<ExtArgs> | null
    /**
     * The filter to search for the CatProd to update in case it exists.
     */
    where: CatProdWhereUniqueInput
    /**
     * In case the CatProd found by the `where` argument doesn't exist, create a new CatProd with this data.
     */
    create: XOR<CatProdCreateInput, CatProdUncheckedCreateInput>
    /**
     * In case the CatProd was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CatProdUpdateInput, CatProdUncheckedUpdateInput>
  }

  /**
   * CatProd delete
   */
  export type CatProdDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CatProd
     */
    select?: CatProdSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CatProdInclude<ExtArgs> | null
    /**
     * Filter which CatProd to delete.
     */
    where: CatProdWhereUniqueInput
  }

  /**
   * CatProd deleteMany
   */
  export type CatProdDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which CatProds to delete
     */
    where?: CatProdWhereInput
  }

  /**
   * CatProd without action
   */
  export type CatProdDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CatProd
     */
    select?: CatProdSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CatProdInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UsersScalarFieldEnum: {
    id: 'id',
    nome: 'nome',
    email: 'email',
    senha: 'senha',
    cpf: 'cpf',
    celular: 'celular',
    endereco: 'endereco',
    bairro: 'bairro',
    cidade: 'cidade',
    cep: 'cep',
    complemento: 'complemento',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type UsersScalarFieldEnum = (typeof UsersScalarFieldEnum)[keyof typeof UsersScalarFieldEnum]


  export const CartaoScalarFieldEnum: {
    id: 'id',
    cartao: 'cartao',
    validade: 'validade',
    cvv: 'cvv',
    nomeCartao: 'nomeCartao',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type CartaoScalarFieldEnum = (typeof CartaoScalarFieldEnum)[keyof typeof CartaoScalarFieldEnum]


  export const CategoriaScalarFieldEnum: {
    id: 'id',
    nome: 'nome',
    slug: 'slug'
  };

  export type CategoriaScalarFieldEnum = (typeof CategoriaScalarFieldEnum)[keyof typeof CategoriaScalarFieldEnum]


  export const ProdutosScalarFieldEnum: {
    id: 'id',
    enabled: 'enabled',
    nome: 'nome',
    slug: 'slug',
    estoque: 'estoque',
    descricao: 'descricao',
    preco: 'preco',
    preco_desconto: 'preco_desconto',
    desconto_off: 'desconto_off'
  };

  export type ProdutosScalarFieldEnum = (typeof ProdutosScalarFieldEnum)[keyof typeof ProdutosScalarFieldEnum]


  export const ProdutosImgScalarFieldEnum: {
    id: 'id',
    product_id: 'product_id',
    path: 'path'
  };

  export type ProdutosImgScalarFieldEnum = (typeof ProdutosImgScalarFieldEnum)[keyof typeof ProdutosImgScalarFieldEnum]


  export const CatProdScalarFieldEnum: {
    id: 'id',
    product_id: 'product_id',
    categoria_id: 'categoria_id'
  };

  export type CatProdScalarFieldEnum = (typeof CatProdScalarFieldEnum)[keyof typeof CatProdScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    
  /**
   * Deep Input Types
   */


  export type UsersWhereInput = {
    AND?: UsersWhereInput | UsersWhereInput[]
    OR?: UsersWhereInput[]
    NOT?: UsersWhereInput | UsersWhereInput[]
    id?: IntFilter<"Users"> | number
    nome?: StringFilter<"Users"> | string
    email?: StringFilter<"Users"> | string
    senha?: StringFilter<"Users"> | string
    cpf?: IntFilter<"Users"> | number
    celular?: IntFilter<"Users"> | number
    endereco?: StringFilter<"Users"> | string
    bairro?: StringFilter<"Users"> | string
    cidade?: StringFilter<"Users"> | string
    cep?: IntFilter<"Users"> | number
    complemento?: StringNullableFilter<"Users"> | string | null
    createdAt?: DateTimeFilter<"Users"> | Date | string
    updatedAt?: DateTimeFilter<"Users"> | Date | string
  }

  export type UsersOrderByWithRelationInput = {
    id?: SortOrder
    nome?: SortOrder
    email?: SortOrder
    senha?: SortOrder
    cpf?: SortOrder
    celular?: SortOrder
    endereco?: SortOrder
    bairro?: SortOrder
    cidade?: SortOrder
    cep?: SortOrder
    complemento?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UsersWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    email?: string
    cpf?: number
    AND?: UsersWhereInput | UsersWhereInput[]
    OR?: UsersWhereInput[]
    NOT?: UsersWhereInput | UsersWhereInput[]
    nome?: StringFilter<"Users"> | string
    senha?: StringFilter<"Users"> | string
    celular?: IntFilter<"Users"> | number
    endereco?: StringFilter<"Users"> | string
    bairro?: StringFilter<"Users"> | string
    cidade?: StringFilter<"Users"> | string
    cep?: IntFilter<"Users"> | number
    complemento?: StringNullableFilter<"Users"> | string | null
    createdAt?: DateTimeFilter<"Users"> | Date | string
    updatedAt?: DateTimeFilter<"Users"> | Date | string
  }, "id" | "email" | "cpf">

  export type UsersOrderByWithAggregationInput = {
    id?: SortOrder
    nome?: SortOrder
    email?: SortOrder
    senha?: SortOrder
    cpf?: SortOrder
    celular?: SortOrder
    endereco?: SortOrder
    bairro?: SortOrder
    cidade?: SortOrder
    cep?: SortOrder
    complemento?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: UsersCountOrderByAggregateInput
    _avg?: UsersAvgOrderByAggregateInput
    _max?: UsersMaxOrderByAggregateInput
    _min?: UsersMinOrderByAggregateInput
    _sum?: UsersSumOrderByAggregateInput
  }

  export type UsersScalarWhereWithAggregatesInput = {
    AND?: UsersScalarWhereWithAggregatesInput | UsersScalarWhereWithAggregatesInput[]
    OR?: UsersScalarWhereWithAggregatesInput[]
    NOT?: UsersScalarWhereWithAggregatesInput | UsersScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Users"> | number
    nome?: StringWithAggregatesFilter<"Users"> | string
    email?: StringWithAggregatesFilter<"Users"> | string
    senha?: StringWithAggregatesFilter<"Users"> | string
    cpf?: IntWithAggregatesFilter<"Users"> | number
    celular?: IntWithAggregatesFilter<"Users"> | number
    endereco?: StringWithAggregatesFilter<"Users"> | string
    bairro?: StringWithAggregatesFilter<"Users"> | string
    cidade?: StringWithAggregatesFilter<"Users"> | string
    cep?: IntWithAggregatesFilter<"Users"> | number
    complemento?: StringNullableWithAggregatesFilter<"Users"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"Users"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Users"> | Date | string
  }

  export type CartaoWhereInput = {
    AND?: CartaoWhereInput | CartaoWhereInput[]
    OR?: CartaoWhereInput[]
    NOT?: CartaoWhereInput | CartaoWhereInput[]
    id?: IntFilter<"Cartao"> | number
    cartao?: StringFilter<"Cartao"> | string
    validade?: StringFilter<"Cartao"> | string
    cvv?: StringFilter<"Cartao"> | string
    nomeCartao?: StringFilter<"Cartao"> | string
    createdAt?: DateTimeFilter<"Cartao"> | Date | string
    updatedAt?: DateTimeFilter<"Cartao"> | Date | string
  }

  export type CartaoOrderByWithRelationInput = {
    id?: SortOrder
    cartao?: SortOrder
    validade?: SortOrder
    cvv?: SortOrder
    nomeCartao?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type CartaoWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: CartaoWhereInput | CartaoWhereInput[]
    OR?: CartaoWhereInput[]
    NOT?: CartaoWhereInput | CartaoWhereInput[]
    cartao?: StringFilter<"Cartao"> | string
    validade?: StringFilter<"Cartao"> | string
    cvv?: StringFilter<"Cartao"> | string
    nomeCartao?: StringFilter<"Cartao"> | string
    createdAt?: DateTimeFilter<"Cartao"> | Date | string
    updatedAt?: DateTimeFilter<"Cartao"> | Date | string
  }, "id">

  export type CartaoOrderByWithAggregationInput = {
    id?: SortOrder
    cartao?: SortOrder
    validade?: SortOrder
    cvv?: SortOrder
    nomeCartao?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: CartaoCountOrderByAggregateInput
    _avg?: CartaoAvgOrderByAggregateInput
    _max?: CartaoMaxOrderByAggregateInput
    _min?: CartaoMinOrderByAggregateInput
    _sum?: CartaoSumOrderByAggregateInput
  }

  export type CartaoScalarWhereWithAggregatesInput = {
    AND?: CartaoScalarWhereWithAggregatesInput | CartaoScalarWhereWithAggregatesInput[]
    OR?: CartaoScalarWhereWithAggregatesInput[]
    NOT?: CartaoScalarWhereWithAggregatesInput | CartaoScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Cartao"> | number
    cartao?: StringWithAggregatesFilter<"Cartao"> | string
    validade?: StringWithAggregatesFilter<"Cartao"> | string
    cvv?: StringWithAggregatesFilter<"Cartao"> | string
    nomeCartao?: StringWithAggregatesFilter<"Cartao"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Cartao"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Cartao"> | Date | string
  }

  export type CategoriaWhereInput = {
    AND?: CategoriaWhereInput | CategoriaWhereInput[]
    OR?: CategoriaWhereInput[]
    NOT?: CategoriaWhereInput | CategoriaWhereInput[]
    id?: IntFilter<"Categoria"> | number
    nome?: StringFilter<"Categoria"> | string
    slug?: StringFilter<"Categoria"> | string
    catprod?: XOR<CatProdNullableRelationFilter, CatProdWhereInput> | null
  }

  export type CategoriaOrderByWithRelationInput = {
    id?: SortOrder
    nome?: SortOrder
    slug?: SortOrder
    catprod?: CatProdOrderByWithRelationInput
  }

  export type CategoriaWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: CategoriaWhereInput | CategoriaWhereInput[]
    OR?: CategoriaWhereInput[]
    NOT?: CategoriaWhereInput | CategoriaWhereInput[]
    nome?: StringFilter<"Categoria"> | string
    slug?: StringFilter<"Categoria"> | string
    catprod?: XOR<CatProdNullableRelationFilter, CatProdWhereInput> | null
  }, "id">

  export type CategoriaOrderByWithAggregationInput = {
    id?: SortOrder
    nome?: SortOrder
    slug?: SortOrder
    _count?: CategoriaCountOrderByAggregateInput
    _avg?: CategoriaAvgOrderByAggregateInput
    _max?: CategoriaMaxOrderByAggregateInput
    _min?: CategoriaMinOrderByAggregateInput
    _sum?: CategoriaSumOrderByAggregateInput
  }

  export type CategoriaScalarWhereWithAggregatesInput = {
    AND?: CategoriaScalarWhereWithAggregatesInput | CategoriaScalarWhereWithAggregatesInput[]
    OR?: CategoriaScalarWhereWithAggregatesInput[]
    NOT?: CategoriaScalarWhereWithAggregatesInput | CategoriaScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Categoria"> | number
    nome?: StringWithAggregatesFilter<"Categoria"> | string
    slug?: StringWithAggregatesFilter<"Categoria"> | string
  }

  export type ProdutosWhereInput = {
    AND?: ProdutosWhereInput | ProdutosWhereInput[]
    OR?: ProdutosWhereInput[]
    NOT?: ProdutosWhereInput | ProdutosWhereInput[]
    id?: IntFilter<"Produtos"> | number
    enabled?: BoolNullableFilter<"Produtos"> | boolean | null
    nome?: StringFilter<"Produtos"> | string
    slug?: StringFilter<"Produtos"> | string
    estoque?: StringFilter<"Produtos"> | string
    descricao?: StringFilter<"Produtos"> | string
    preco?: StringFilter<"Produtos"> | string
    preco_desconto?: StringFilter<"Produtos"> | string
    desconto_off?: StringFilter<"Produtos"> | string
    img?: XOR<ProdutosImgNullableRelationFilter, ProdutosImgWhereInput> | null
    catprod?: XOR<CatProdNullableRelationFilter, CatProdWhereInput> | null
  }

  export type ProdutosOrderByWithRelationInput = {
    id?: SortOrder
    enabled?: SortOrderInput | SortOrder
    nome?: SortOrder
    slug?: SortOrder
    estoque?: SortOrder
    descricao?: SortOrder
    preco?: SortOrder
    preco_desconto?: SortOrder
    desconto_off?: SortOrder
    img?: ProdutosImgOrderByWithRelationInput
    catprod?: CatProdOrderByWithRelationInput
  }

  export type ProdutosWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: ProdutosWhereInput | ProdutosWhereInput[]
    OR?: ProdutosWhereInput[]
    NOT?: ProdutosWhereInput | ProdutosWhereInput[]
    enabled?: BoolNullableFilter<"Produtos"> | boolean | null
    nome?: StringFilter<"Produtos"> | string
    slug?: StringFilter<"Produtos"> | string
    estoque?: StringFilter<"Produtos"> | string
    descricao?: StringFilter<"Produtos"> | string
    preco?: StringFilter<"Produtos"> | string
    preco_desconto?: StringFilter<"Produtos"> | string
    desconto_off?: StringFilter<"Produtos"> | string
    img?: XOR<ProdutosImgNullableRelationFilter, ProdutosImgWhereInput> | null
    catprod?: XOR<CatProdNullableRelationFilter, CatProdWhereInput> | null
  }, "id">

  export type ProdutosOrderByWithAggregationInput = {
    id?: SortOrder
    enabled?: SortOrderInput | SortOrder
    nome?: SortOrder
    slug?: SortOrder
    estoque?: SortOrder
    descricao?: SortOrder
    preco?: SortOrder
    preco_desconto?: SortOrder
    desconto_off?: SortOrder
    _count?: ProdutosCountOrderByAggregateInput
    _avg?: ProdutosAvgOrderByAggregateInput
    _max?: ProdutosMaxOrderByAggregateInput
    _min?: ProdutosMinOrderByAggregateInput
    _sum?: ProdutosSumOrderByAggregateInput
  }

  export type ProdutosScalarWhereWithAggregatesInput = {
    AND?: ProdutosScalarWhereWithAggregatesInput | ProdutosScalarWhereWithAggregatesInput[]
    OR?: ProdutosScalarWhereWithAggregatesInput[]
    NOT?: ProdutosScalarWhereWithAggregatesInput | ProdutosScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Produtos"> | number
    enabled?: BoolNullableWithAggregatesFilter<"Produtos"> | boolean | null
    nome?: StringWithAggregatesFilter<"Produtos"> | string
    slug?: StringWithAggregatesFilter<"Produtos"> | string
    estoque?: StringWithAggregatesFilter<"Produtos"> | string
    descricao?: StringWithAggregatesFilter<"Produtos"> | string
    preco?: StringWithAggregatesFilter<"Produtos"> | string
    preco_desconto?: StringWithAggregatesFilter<"Produtos"> | string
    desconto_off?: StringWithAggregatesFilter<"Produtos"> | string
  }

  export type ProdutosImgWhereInput = {
    AND?: ProdutosImgWhereInput | ProdutosImgWhereInput[]
    OR?: ProdutosImgWhereInput[]
    NOT?: ProdutosImgWhereInput | ProdutosImgWhereInput[]
    id?: IntFilter<"ProdutosImg"> | number
    product_id?: IntFilter<"ProdutosImg"> | number
    path?: StringFilter<"ProdutosImg"> | string
    product?: XOR<ProdutosRelationFilter, ProdutosWhereInput>
  }

  export type ProdutosImgOrderByWithRelationInput = {
    id?: SortOrder
    product_id?: SortOrder
    path?: SortOrder
    product?: ProdutosOrderByWithRelationInput
  }

  export type ProdutosImgWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    product_id?: number
    AND?: ProdutosImgWhereInput | ProdutosImgWhereInput[]
    OR?: ProdutosImgWhereInput[]
    NOT?: ProdutosImgWhereInput | ProdutosImgWhereInput[]
    path?: StringFilter<"ProdutosImg"> | string
    product?: XOR<ProdutosRelationFilter, ProdutosWhereInput>
  }, "id" | "product_id">

  export type ProdutosImgOrderByWithAggregationInput = {
    id?: SortOrder
    product_id?: SortOrder
    path?: SortOrder
    _count?: ProdutosImgCountOrderByAggregateInput
    _avg?: ProdutosImgAvgOrderByAggregateInput
    _max?: ProdutosImgMaxOrderByAggregateInput
    _min?: ProdutosImgMinOrderByAggregateInput
    _sum?: ProdutosImgSumOrderByAggregateInput
  }

  export type ProdutosImgScalarWhereWithAggregatesInput = {
    AND?: ProdutosImgScalarWhereWithAggregatesInput | ProdutosImgScalarWhereWithAggregatesInput[]
    OR?: ProdutosImgScalarWhereWithAggregatesInput[]
    NOT?: ProdutosImgScalarWhereWithAggregatesInput | ProdutosImgScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"ProdutosImg"> | number
    product_id?: IntWithAggregatesFilter<"ProdutosImg"> | number
    path?: StringWithAggregatesFilter<"ProdutosImg"> | string
  }

  export type CatProdWhereInput = {
    AND?: CatProdWhereInput | CatProdWhereInput[]
    OR?: CatProdWhereInput[]
    NOT?: CatProdWhereInput | CatProdWhereInput[]
    id?: IntFilter<"CatProd"> | number
    product_id?: IntFilter<"CatProd"> | number
    categoria_id?: IntFilter<"CatProd"> | number
    product?: XOR<ProdutosRelationFilter, ProdutosWhereInput>
    categoria?: XOR<CategoriaRelationFilter, CategoriaWhereInput>
  }

  export type CatProdOrderByWithRelationInput = {
    id?: SortOrder
    product_id?: SortOrder
    categoria_id?: SortOrder
    product?: ProdutosOrderByWithRelationInput
    categoria?: CategoriaOrderByWithRelationInput
  }

  export type CatProdWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    product_id?: number
    categoria_id?: number
    AND?: CatProdWhereInput | CatProdWhereInput[]
    OR?: CatProdWhereInput[]
    NOT?: CatProdWhereInput | CatProdWhereInput[]
    product?: XOR<ProdutosRelationFilter, ProdutosWhereInput>
    categoria?: XOR<CategoriaRelationFilter, CategoriaWhereInput>
  }, "id" | "product_id" | "categoria_id">

  export type CatProdOrderByWithAggregationInput = {
    id?: SortOrder
    product_id?: SortOrder
    categoria_id?: SortOrder
    _count?: CatProdCountOrderByAggregateInput
    _avg?: CatProdAvgOrderByAggregateInput
    _max?: CatProdMaxOrderByAggregateInput
    _min?: CatProdMinOrderByAggregateInput
    _sum?: CatProdSumOrderByAggregateInput
  }

  export type CatProdScalarWhereWithAggregatesInput = {
    AND?: CatProdScalarWhereWithAggregatesInput | CatProdScalarWhereWithAggregatesInput[]
    OR?: CatProdScalarWhereWithAggregatesInput[]
    NOT?: CatProdScalarWhereWithAggregatesInput | CatProdScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"CatProd"> | number
    product_id?: IntWithAggregatesFilter<"CatProd"> | number
    categoria_id?: IntWithAggregatesFilter<"CatProd"> | number
  }

  export type UsersCreateInput = {
    nome: string
    email: string
    senha: string
    cpf: number
    celular: number
    endereco: string
    bairro: string
    cidade: string
    cep: number
    complemento?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UsersUncheckedCreateInput = {
    id?: number
    nome: string
    email: string
    senha: string
    cpf: number
    celular: number
    endereco: string
    bairro: string
    cidade: string
    cep: number
    complemento?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UsersUpdateInput = {
    nome?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    senha?: StringFieldUpdateOperationsInput | string
    cpf?: IntFieldUpdateOperationsInput | number
    celular?: IntFieldUpdateOperationsInput | number
    endereco?: StringFieldUpdateOperationsInput | string
    bairro?: StringFieldUpdateOperationsInput | string
    cidade?: StringFieldUpdateOperationsInput | string
    cep?: IntFieldUpdateOperationsInput | number
    complemento?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UsersUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    senha?: StringFieldUpdateOperationsInput | string
    cpf?: IntFieldUpdateOperationsInput | number
    celular?: IntFieldUpdateOperationsInput | number
    endereco?: StringFieldUpdateOperationsInput | string
    bairro?: StringFieldUpdateOperationsInput | string
    cidade?: StringFieldUpdateOperationsInput | string
    cep?: IntFieldUpdateOperationsInput | number
    complemento?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UsersCreateManyInput = {
    id?: number
    nome: string
    email: string
    senha: string
    cpf: number
    celular: number
    endereco: string
    bairro: string
    cidade: string
    cep: number
    complemento?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UsersUpdateManyMutationInput = {
    nome?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    senha?: StringFieldUpdateOperationsInput | string
    cpf?: IntFieldUpdateOperationsInput | number
    celular?: IntFieldUpdateOperationsInput | number
    endereco?: StringFieldUpdateOperationsInput | string
    bairro?: StringFieldUpdateOperationsInput | string
    cidade?: StringFieldUpdateOperationsInput | string
    cep?: IntFieldUpdateOperationsInput | number
    complemento?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UsersUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    senha?: StringFieldUpdateOperationsInput | string
    cpf?: IntFieldUpdateOperationsInput | number
    celular?: IntFieldUpdateOperationsInput | number
    endereco?: StringFieldUpdateOperationsInput | string
    bairro?: StringFieldUpdateOperationsInput | string
    cidade?: StringFieldUpdateOperationsInput | string
    cep?: IntFieldUpdateOperationsInput | number
    complemento?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CartaoCreateInput = {
    cartao: string
    validade: string
    cvv: string
    nomeCartao: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CartaoUncheckedCreateInput = {
    id?: number
    cartao: string
    validade: string
    cvv: string
    nomeCartao: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CartaoUpdateInput = {
    cartao?: StringFieldUpdateOperationsInput | string
    validade?: StringFieldUpdateOperationsInput | string
    cvv?: StringFieldUpdateOperationsInput | string
    nomeCartao?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CartaoUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    cartao?: StringFieldUpdateOperationsInput | string
    validade?: StringFieldUpdateOperationsInput | string
    cvv?: StringFieldUpdateOperationsInput | string
    nomeCartao?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CartaoCreateManyInput = {
    id?: number
    cartao: string
    validade: string
    cvv: string
    nomeCartao: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CartaoUpdateManyMutationInput = {
    cartao?: StringFieldUpdateOperationsInput | string
    validade?: StringFieldUpdateOperationsInput | string
    cvv?: StringFieldUpdateOperationsInput | string
    nomeCartao?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CartaoUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    cartao?: StringFieldUpdateOperationsInput | string
    validade?: StringFieldUpdateOperationsInput | string
    cvv?: StringFieldUpdateOperationsInput | string
    nomeCartao?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CategoriaCreateInput = {
    nome: string
    slug: string
    catprod?: CatProdCreateNestedOneWithoutCategoriaInput
  }

  export type CategoriaUncheckedCreateInput = {
    id?: number
    nome: string
    slug: string
    catprod?: CatProdUncheckedCreateNestedOneWithoutCategoriaInput
  }

  export type CategoriaUpdateInput = {
    nome?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    catprod?: CatProdUpdateOneWithoutCategoriaNestedInput
  }

  export type CategoriaUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    catprod?: CatProdUncheckedUpdateOneWithoutCategoriaNestedInput
  }

  export type CategoriaCreateManyInput = {
    id?: number
    nome: string
    slug: string
  }

  export type CategoriaUpdateManyMutationInput = {
    nome?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
  }

  export type CategoriaUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
  }

  export type ProdutosCreateInput = {
    enabled?: boolean | null
    nome: string
    slug: string
    estoque: string
    descricao: string
    preco: string
    preco_desconto: string
    desconto_off: string
    img?: ProdutosImgCreateNestedOneWithoutProductInput
    catprod?: CatProdCreateNestedOneWithoutProductInput
  }

  export type ProdutosUncheckedCreateInput = {
    id?: number
    enabled?: boolean | null
    nome: string
    slug: string
    estoque: string
    descricao: string
    preco: string
    preco_desconto: string
    desconto_off: string
    img?: ProdutosImgUncheckedCreateNestedOneWithoutProductInput
    catprod?: CatProdUncheckedCreateNestedOneWithoutProductInput
  }

  export type ProdutosUpdateInput = {
    enabled?: NullableBoolFieldUpdateOperationsInput | boolean | null
    nome?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    estoque?: StringFieldUpdateOperationsInput | string
    descricao?: StringFieldUpdateOperationsInput | string
    preco?: StringFieldUpdateOperationsInput | string
    preco_desconto?: StringFieldUpdateOperationsInput | string
    desconto_off?: StringFieldUpdateOperationsInput | string
    img?: ProdutosImgUpdateOneWithoutProductNestedInput
    catprod?: CatProdUpdateOneWithoutProductNestedInput
  }

  export type ProdutosUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    enabled?: NullableBoolFieldUpdateOperationsInput | boolean | null
    nome?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    estoque?: StringFieldUpdateOperationsInput | string
    descricao?: StringFieldUpdateOperationsInput | string
    preco?: StringFieldUpdateOperationsInput | string
    preco_desconto?: StringFieldUpdateOperationsInput | string
    desconto_off?: StringFieldUpdateOperationsInput | string
    img?: ProdutosImgUncheckedUpdateOneWithoutProductNestedInput
    catprod?: CatProdUncheckedUpdateOneWithoutProductNestedInput
  }

  export type ProdutosCreateManyInput = {
    id?: number
    enabled?: boolean | null
    nome: string
    slug: string
    estoque: string
    descricao: string
    preco: string
    preco_desconto: string
    desconto_off: string
  }

  export type ProdutosUpdateManyMutationInput = {
    enabled?: NullableBoolFieldUpdateOperationsInput | boolean | null
    nome?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    estoque?: StringFieldUpdateOperationsInput | string
    descricao?: StringFieldUpdateOperationsInput | string
    preco?: StringFieldUpdateOperationsInput | string
    preco_desconto?: StringFieldUpdateOperationsInput | string
    desconto_off?: StringFieldUpdateOperationsInput | string
  }

  export type ProdutosUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    enabled?: NullableBoolFieldUpdateOperationsInput | boolean | null
    nome?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    estoque?: StringFieldUpdateOperationsInput | string
    descricao?: StringFieldUpdateOperationsInput | string
    preco?: StringFieldUpdateOperationsInput | string
    preco_desconto?: StringFieldUpdateOperationsInput | string
    desconto_off?: StringFieldUpdateOperationsInput | string
  }

  export type ProdutosImgCreateInput = {
    path: string
    product: ProdutosCreateNestedOneWithoutImgInput
  }

  export type ProdutosImgUncheckedCreateInput = {
    id?: number
    product_id: number
    path: string
  }

  export type ProdutosImgUpdateInput = {
    path?: StringFieldUpdateOperationsInput | string
    product?: ProdutosUpdateOneRequiredWithoutImgNestedInput
  }

  export type ProdutosImgUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    product_id?: IntFieldUpdateOperationsInput | number
    path?: StringFieldUpdateOperationsInput | string
  }

  export type ProdutosImgCreateManyInput = {
    id?: number
    product_id: number
    path: string
  }

  export type ProdutosImgUpdateManyMutationInput = {
    path?: StringFieldUpdateOperationsInput | string
  }

  export type ProdutosImgUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    product_id?: IntFieldUpdateOperationsInput | number
    path?: StringFieldUpdateOperationsInput | string
  }

  export type CatProdCreateInput = {
    product: ProdutosCreateNestedOneWithoutCatprodInput
    categoria: CategoriaCreateNestedOneWithoutCatprodInput
  }

  export type CatProdUncheckedCreateInput = {
    id?: number
    product_id: number
    categoria_id: number
  }

  export type CatProdUpdateInput = {
    product?: ProdutosUpdateOneRequiredWithoutCatprodNestedInput
    categoria?: CategoriaUpdateOneRequiredWithoutCatprodNestedInput
  }

  export type CatProdUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    product_id?: IntFieldUpdateOperationsInput | number
    categoria_id?: IntFieldUpdateOperationsInput | number
  }

  export type CatProdCreateManyInput = {
    id?: number
    product_id: number
    categoria_id: number
  }

  export type CatProdUpdateManyMutationInput = {

  }

  export type CatProdUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    product_id?: IntFieldUpdateOperationsInput | number
    categoria_id?: IntFieldUpdateOperationsInput | number
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type UsersCountOrderByAggregateInput = {
    id?: SortOrder
    nome?: SortOrder
    email?: SortOrder
    senha?: SortOrder
    cpf?: SortOrder
    celular?: SortOrder
    endereco?: SortOrder
    bairro?: SortOrder
    cidade?: SortOrder
    cep?: SortOrder
    complemento?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UsersAvgOrderByAggregateInput = {
    id?: SortOrder
    cpf?: SortOrder
    celular?: SortOrder
    cep?: SortOrder
  }

  export type UsersMaxOrderByAggregateInput = {
    id?: SortOrder
    nome?: SortOrder
    email?: SortOrder
    senha?: SortOrder
    cpf?: SortOrder
    celular?: SortOrder
    endereco?: SortOrder
    bairro?: SortOrder
    cidade?: SortOrder
    cep?: SortOrder
    complemento?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UsersMinOrderByAggregateInput = {
    id?: SortOrder
    nome?: SortOrder
    email?: SortOrder
    senha?: SortOrder
    cpf?: SortOrder
    celular?: SortOrder
    endereco?: SortOrder
    bairro?: SortOrder
    cidade?: SortOrder
    cep?: SortOrder
    complemento?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UsersSumOrderByAggregateInput = {
    id?: SortOrder
    cpf?: SortOrder
    celular?: SortOrder
    cep?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type CartaoCountOrderByAggregateInput = {
    id?: SortOrder
    cartao?: SortOrder
    validade?: SortOrder
    cvv?: SortOrder
    nomeCartao?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type CartaoAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type CartaoMaxOrderByAggregateInput = {
    id?: SortOrder
    cartao?: SortOrder
    validade?: SortOrder
    cvv?: SortOrder
    nomeCartao?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type CartaoMinOrderByAggregateInput = {
    id?: SortOrder
    cartao?: SortOrder
    validade?: SortOrder
    cvv?: SortOrder
    nomeCartao?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type CartaoSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type CatProdNullableRelationFilter = {
    is?: CatProdWhereInput | null
    isNot?: CatProdWhereInput | null
  }

  export type CategoriaCountOrderByAggregateInput = {
    id?: SortOrder
    nome?: SortOrder
    slug?: SortOrder
  }

  export type CategoriaAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type CategoriaMaxOrderByAggregateInput = {
    id?: SortOrder
    nome?: SortOrder
    slug?: SortOrder
  }

  export type CategoriaMinOrderByAggregateInput = {
    id?: SortOrder
    nome?: SortOrder
    slug?: SortOrder
  }

  export type CategoriaSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type BoolNullableFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel> | null
    not?: NestedBoolNullableFilter<$PrismaModel> | boolean | null
  }

  export type ProdutosImgNullableRelationFilter = {
    is?: ProdutosImgWhereInput | null
    isNot?: ProdutosImgWhereInput | null
  }

  export type ProdutosCountOrderByAggregateInput = {
    id?: SortOrder
    enabled?: SortOrder
    nome?: SortOrder
    slug?: SortOrder
    estoque?: SortOrder
    descricao?: SortOrder
    preco?: SortOrder
    preco_desconto?: SortOrder
    desconto_off?: SortOrder
  }

  export type ProdutosAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type ProdutosMaxOrderByAggregateInput = {
    id?: SortOrder
    enabled?: SortOrder
    nome?: SortOrder
    slug?: SortOrder
    estoque?: SortOrder
    descricao?: SortOrder
    preco?: SortOrder
    preco_desconto?: SortOrder
    desconto_off?: SortOrder
  }

  export type ProdutosMinOrderByAggregateInput = {
    id?: SortOrder
    enabled?: SortOrder
    nome?: SortOrder
    slug?: SortOrder
    estoque?: SortOrder
    descricao?: SortOrder
    preco?: SortOrder
    preco_desconto?: SortOrder
    desconto_off?: SortOrder
  }

  export type ProdutosSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type BoolNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel> | null
    not?: NestedBoolNullableWithAggregatesFilter<$PrismaModel> | boolean | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedBoolNullableFilter<$PrismaModel>
    _max?: NestedBoolNullableFilter<$PrismaModel>
  }

  export type ProdutosRelationFilter = {
    is?: ProdutosWhereInput
    isNot?: ProdutosWhereInput
  }

  export type ProdutosImgCountOrderByAggregateInput = {
    id?: SortOrder
    product_id?: SortOrder
    path?: SortOrder
  }

  export type ProdutosImgAvgOrderByAggregateInput = {
    id?: SortOrder
    product_id?: SortOrder
  }

  export type ProdutosImgMaxOrderByAggregateInput = {
    id?: SortOrder
    product_id?: SortOrder
    path?: SortOrder
  }

  export type ProdutosImgMinOrderByAggregateInput = {
    id?: SortOrder
    product_id?: SortOrder
    path?: SortOrder
  }

  export type ProdutosImgSumOrderByAggregateInput = {
    id?: SortOrder
    product_id?: SortOrder
  }

  export type CategoriaRelationFilter = {
    is?: CategoriaWhereInput
    isNot?: CategoriaWhereInput
  }

  export type CatProdCountOrderByAggregateInput = {
    id?: SortOrder
    product_id?: SortOrder
    categoria_id?: SortOrder
  }

  export type CatProdAvgOrderByAggregateInput = {
    id?: SortOrder
    product_id?: SortOrder
    categoria_id?: SortOrder
  }

  export type CatProdMaxOrderByAggregateInput = {
    id?: SortOrder
    product_id?: SortOrder
    categoria_id?: SortOrder
  }

  export type CatProdMinOrderByAggregateInput = {
    id?: SortOrder
    product_id?: SortOrder
    categoria_id?: SortOrder
  }

  export type CatProdSumOrderByAggregateInput = {
    id?: SortOrder
    product_id?: SortOrder
    categoria_id?: SortOrder
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type CatProdCreateNestedOneWithoutCategoriaInput = {
    create?: XOR<CatProdCreateWithoutCategoriaInput, CatProdUncheckedCreateWithoutCategoriaInput>
    connectOrCreate?: CatProdCreateOrConnectWithoutCategoriaInput
    connect?: CatProdWhereUniqueInput
  }

  export type CatProdUncheckedCreateNestedOneWithoutCategoriaInput = {
    create?: XOR<CatProdCreateWithoutCategoriaInput, CatProdUncheckedCreateWithoutCategoriaInput>
    connectOrCreate?: CatProdCreateOrConnectWithoutCategoriaInput
    connect?: CatProdWhereUniqueInput
  }

  export type CatProdUpdateOneWithoutCategoriaNestedInput = {
    create?: XOR<CatProdCreateWithoutCategoriaInput, CatProdUncheckedCreateWithoutCategoriaInput>
    connectOrCreate?: CatProdCreateOrConnectWithoutCategoriaInput
    upsert?: CatProdUpsertWithoutCategoriaInput
    disconnect?: CatProdWhereInput | boolean
    delete?: CatProdWhereInput | boolean
    connect?: CatProdWhereUniqueInput
    update?: XOR<XOR<CatProdUpdateToOneWithWhereWithoutCategoriaInput, CatProdUpdateWithoutCategoriaInput>, CatProdUncheckedUpdateWithoutCategoriaInput>
  }

  export type CatProdUncheckedUpdateOneWithoutCategoriaNestedInput = {
    create?: XOR<CatProdCreateWithoutCategoriaInput, CatProdUncheckedCreateWithoutCategoriaInput>
    connectOrCreate?: CatProdCreateOrConnectWithoutCategoriaInput
    upsert?: CatProdUpsertWithoutCategoriaInput
    disconnect?: CatProdWhereInput | boolean
    delete?: CatProdWhereInput | boolean
    connect?: CatProdWhereUniqueInput
    update?: XOR<XOR<CatProdUpdateToOneWithWhereWithoutCategoriaInput, CatProdUpdateWithoutCategoriaInput>, CatProdUncheckedUpdateWithoutCategoriaInput>
  }

  export type ProdutosImgCreateNestedOneWithoutProductInput = {
    create?: XOR<ProdutosImgCreateWithoutProductInput, ProdutosImgUncheckedCreateWithoutProductInput>
    connectOrCreate?: ProdutosImgCreateOrConnectWithoutProductInput
    connect?: ProdutosImgWhereUniqueInput
  }

  export type CatProdCreateNestedOneWithoutProductInput = {
    create?: XOR<CatProdCreateWithoutProductInput, CatProdUncheckedCreateWithoutProductInput>
    connectOrCreate?: CatProdCreateOrConnectWithoutProductInput
    connect?: CatProdWhereUniqueInput
  }

  export type ProdutosImgUncheckedCreateNestedOneWithoutProductInput = {
    create?: XOR<ProdutosImgCreateWithoutProductInput, ProdutosImgUncheckedCreateWithoutProductInput>
    connectOrCreate?: ProdutosImgCreateOrConnectWithoutProductInput
    connect?: ProdutosImgWhereUniqueInput
  }

  export type CatProdUncheckedCreateNestedOneWithoutProductInput = {
    create?: XOR<CatProdCreateWithoutProductInput, CatProdUncheckedCreateWithoutProductInput>
    connectOrCreate?: CatProdCreateOrConnectWithoutProductInput
    connect?: CatProdWhereUniqueInput
  }

  export type NullableBoolFieldUpdateOperationsInput = {
    set?: boolean | null
  }

  export type ProdutosImgUpdateOneWithoutProductNestedInput = {
    create?: XOR<ProdutosImgCreateWithoutProductInput, ProdutosImgUncheckedCreateWithoutProductInput>
    connectOrCreate?: ProdutosImgCreateOrConnectWithoutProductInput
    upsert?: ProdutosImgUpsertWithoutProductInput
    disconnect?: ProdutosImgWhereInput | boolean
    delete?: ProdutosImgWhereInput | boolean
    connect?: ProdutosImgWhereUniqueInput
    update?: XOR<XOR<ProdutosImgUpdateToOneWithWhereWithoutProductInput, ProdutosImgUpdateWithoutProductInput>, ProdutosImgUncheckedUpdateWithoutProductInput>
  }

  export type CatProdUpdateOneWithoutProductNestedInput = {
    create?: XOR<CatProdCreateWithoutProductInput, CatProdUncheckedCreateWithoutProductInput>
    connectOrCreate?: CatProdCreateOrConnectWithoutProductInput
    upsert?: CatProdUpsertWithoutProductInput
    disconnect?: CatProdWhereInput | boolean
    delete?: CatProdWhereInput | boolean
    connect?: CatProdWhereUniqueInput
    update?: XOR<XOR<CatProdUpdateToOneWithWhereWithoutProductInput, CatProdUpdateWithoutProductInput>, CatProdUncheckedUpdateWithoutProductInput>
  }

  export type ProdutosImgUncheckedUpdateOneWithoutProductNestedInput = {
    create?: XOR<ProdutosImgCreateWithoutProductInput, ProdutosImgUncheckedCreateWithoutProductInput>
    connectOrCreate?: ProdutosImgCreateOrConnectWithoutProductInput
    upsert?: ProdutosImgUpsertWithoutProductInput
    disconnect?: ProdutosImgWhereInput | boolean
    delete?: ProdutosImgWhereInput | boolean
    connect?: ProdutosImgWhereUniqueInput
    update?: XOR<XOR<ProdutosImgUpdateToOneWithWhereWithoutProductInput, ProdutosImgUpdateWithoutProductInput>, ProdutosImgUncheckedUpdateWithoutProductInput>
  }

  export type CatProdUncheckedUpdateOneWithoutProductNestedInput = {
    create?: XOR<CatProdCreateWithoutProductInput, CatProdUncheckedCreateWithoutProductInput>
    connectOrCreate?: CatProdCreateOrConnectWithoutProductInput
    upsert?: CatProdUpsertWithoutProductInput
    disconnect?: CatProdWhereInput | boolean
    delete?: CatProdWhereInput | boolean
    connect?: CatProdWhereUniqueInput
    update?: XOR<XOR<CatProdUpdateToOneWithWhereWithoutProductInput, CatProdUpdateWithoutProductInput>, CatProdUncheckedUpdateWithoutProductInput>
  }

  export type ProdutosCreateNestedOneWithoutImgInput = {
    create?: XOR<ProdutosCreateWithoutImgInput, ProdutosUncheckedCreateWithoutImgInput>
    connectOrCreate?: ProdutosCreateOrConnectWithoutImgInput
    connect?: ProdutosWhereUniqueInput
  }

  export type ProdutosUpdateOneRequiredWithoutImgNestedInput = {
    create?: XOR<ProdutosCreateWithoutImgInput, ProdutosUncheckedCreateWithoutImgInput>
    connectOrCreate?: ProdutosCreateOrConnectWithoutImgInput
    upsert?: ProdutosUpsertWithoutImgInput
    connect?: ProdutosWhereUniqueInput
    update?: XOR<XOR<ProdutosUpdateToOneWithWhereWithoutImgInput, ProdutosUpdateWithoutImgInput>, ProdutosUncheckedUpdateWithoutImgInput>
  }

  export type ProdutosCreateNestedOneWithoutCatprodInput = {
    create?: XOR<ProdutosCreateWithoutCatprodInput, ProdutosUncheckedCreateWithoutCatprodInput>
    connectOrCreate?: ProdutosCreateOrConnectWithoutCatprodInput
    connect?: ProdutosWhereUniqueInput
  }

  export type CategoriaCreateNestedOneWithoutCatprodInput = {
    create?: XOR<CategoriaCreateWithoutCatprodInput, CategoriaUncheckedCreateWithoutCatprodInput>
    connectOrCreate?: CategoriaCreateOrConnectWithoutCatprodInput
    connect?: CategoriaWhereUniqueInput
  }

  export type ProdutosUpdateOneRequiredWithoutCatprodNestedInput = {
    create?: XOR<ProdutosCreateWithoutCatprodInput, ProdutosUncheckedCreateWithoutCatprodInput>
    connectOrCreate?: ProdutosCreateOrConnectWithoutCatprodInput
    upsert?: ProdutosUpsertWithoutCatprodInput
    connect?: ProdutosWhereUniqueInput
    update?: XOR<XOR<ProdutosUpdateToOneWithWhereWithoutCatprodInput, ProdutosUpdateWithoutCatprodInput>, ProdutosUncheckedUpdateWithoutCatprodInput>
  }

  export type CategoriaUpdateOneRequiredWithoutCatprodNestedInput = {
    create?: XOR<CategoriaCreateWithoutCatprodInput, CategoriaUncheckedCreateWithoutCatprodInput>
    connectOrCreate?: CategoriaCreateOrConnectWithoutCatprodInput
    upsert?: CategoriaUpsertWithoutCatprodInput
    connect?: CategoriaWhereUniqueInput
    update?: XOR<XOR<CategoriaUpdateToOneWithWhereWithoutCatprodInput, CategoriaUpdateWithoutCatprodInput>, CategoriaUncheckedUpdateWithoutCatprodInput>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedBoolNullableFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel> | null
    not?: NestedBoolNullableFilter<$PrismaModel> | boolean | null
  }

  export type NestedBoolNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel> | null
    not?: NestedBoolNullableWithAggregatesFilter<$PrismaModel> | boolean | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedBoolNullableFilter<$PrismaModel>
    _max?: NestedBoolNullableFilter<$PrismaModel>
  }

  export type CatProdCreateWithoutCategoriaInput = {
    product: ProdutosCreateNestedOneWithoutCatprodInput
  }

  export type CatProdUncheckedCreateWithoutCategoriaInput = {
    id?: number
    product_id: number
  }

  export type CatProdCreateOrConnectWithoutCategoriaInput = {
    where: CatProdWhereUniqueInput
    create: XOR<CatProdCreateWithoutCategoriaInput, CatProdUncheckedCreateWithoutCategoriaInput>
  }

  export type CatProdUpsertWithoutCategoriaInput = {
    update: XOR<CatProdUpdateWithoutCategoriaInput, CatProdUncheckedUpdateWithoutCategoriaInput>
    create: XOR<CatProdCreateWithoutCategoriaInput, CatProdUncheckedCreateWithoutCategoriaInput>
    where?: CatProdWhereInput
  }

  export type CatProdUpdateToOneWithWhereWithoutCategoriaInput = {
    where?: CatProdWhereInput
    data: XOR<CatProdUpdateWithoutCategoriaInput, CatProdUncheckedUpdateWithoutCategoriaInput>
  }

  export type CatProdUpdateWithoutCategoriaInput = {
    product?: ProdutosUpdateOneRequiredWithoutCatprodNestedInput
  }

  export type CatProdUncheckedUpdateWithoutCategoriaInput = {
    id?: IntFieldUpdateOperationsInput | number
    product_id?: IntFieldUpdateOperationsInput | number
  }

  export type ProdutosImgCreateWithoutProductInput = {
    path: string
  }

  export type ProdutosImgUncheckedCreateWithoutProductInput = {
    id?: number
    path: string
  }

  export type ProdutosImgCreateOrConnectWithoutProductInput = {
    where: ProdutosImgWhereUniqueInput
    create: XOR<ProdutosImgCreateWithoutProductInput, ProdutosImgUncheckedCreateWithoutProductInput>
  }

  export type CatProdCreateWithoutProductInput = {
    categoria: CategoriaCreateNestedOneWithoutCatprodInput
  }

  export type CatProdUncheckedCreateWithoutProductInput = {
    id?: number
    categoria_id: number
  }

  export type CatProdCreateOrConnectWithoutProductInput = {
    where: CatProdWhereUniqueInput
    create: XOR<CatProdCreateWithoutProductInput, CatProdUncheckedCreateWithoutProductInput>
  }

  export type ProdutosImgUpsertWithoutProductInput = {
    update: XOR<ProdutosImgUpdateWithoutProductInput, ProdutosImgUncheckedUpdateWithoutProductInput>
    create: XOR<ProdutosImgCreateWithoutProductInput, ProdutosImgUncheckedCreateWithoutProductInput>
    where?: ProdutosImgWhereInput
  }

  export type ProdutosImgUpdateToOneWithWhereWithoutProductInput = {
    where?: ProdutosImgWhereInput
    data: XOR<ProdutosImgUpdateWithoutProductInput, ProdutosImgUncheckedUpdateWithoutProductInput>
  }

  export type ProdutosImgUpdateWithoutProductInput = {
    path?: StringFieldUpdateOperationsInput | string
  }

  export type ProdutosImgUncheckedUpdateWithoutProductInput = {
    id?: IntFieldUpdateOperationsInput | number
    path?: StringFieldUpdateOperationsInput | string
  }

  export type CatProdUpsertWithoutProductInput = {
    update: XOR<CatProdUpdateWithoutProductInput, CatProdUncheckedUpdateWithoutProductInput>
    create: XOR<CatProdCreateWithoutProductInput, CatProdUncheckedCreateWithoutProductInput>
    where?: CatProdWhereInput
  }

  export type CatProdUpdateToOneWithWhereWithoutProductInput = {
    where?: CatProdWhereInput
    data: XOR<CatProdUpdateWithoutProductInput, CatProdUncheckedUpdateWithoutProductInput>
  }

  export type CatProdUpdateWithoutProductInput = {
    categoria?: CategoriaUpdateOneRequiredWithoutCatprodNestedInput
  }

  export type CatProdUncheckedUpdateWithoutProductInput = {
    id?: IntFieldUpdateOperationsInput | number
    categoria_id?: IntFieldUpdateOperationsInput | number
  }

  export type ProdutosCreateWithoutImgInput = {
    enabled?: boolean | null
    nome: string
    slug: string
    estoque: string
    descricao: string
    preco: string
    preco_desconto: string
    desconto_off: string
    catprod?: CatProdCreateNestedOneWithoutProductInput
  }

  export type ProdutosUncheckedCreateWithoutImgInput = {
    id?: number
    enabled?: boolean | null
    nome: string
    slug: string
    estoque: string
    descricao: string
    preco: string
    preco_desconto: string
    desconto_off: string
    catprod?: CatProdUncheckedCreateNestedOneWithoutProductInput
  }

  export type ProdutosCreateOrConnectWithoutImgInput = {
    where: ProdutosWhereUniqueInput
    create: XOR<ProdutosCreateWithoutImgInput, ProdutosUncheckedCreateWithoutImgInput>
  }

  export type ProdutosUpsertWithoutImgInput = {
    update: XOR<ProdutosUpdateWithoutImgInput, ProdutosUncheckedUpdateWithoutImgInput>
    create: XOR<ProdutosCreateWithoutImgInput, ProdutosUncheckedCreateWithoutImgInput>
    where?: ProdutosWhereInput
  }

  export type ProdutosUpdateToOneWithWhereWithoutImgInput = {
    where?: ProdutosWhereInput
    data: XOR<ProdutosUpdateWithoutImgInput, ProdutosUncheckedUpdateWithoutImgInput>
  }

  export type ProdutosUpdateWithoutImgInput = {
    enabled?: NullableBoolFieldUpdateOperationsInput | boolean | null
    nome?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    estoque?: StringFieldUpdateOperationsInput | string
    descricao?: StringFieldUpdateOperationsInput | string
    preco?: StringFieldUpdateOperationsInput | string
    preco_desconto?: StringFieldUpdateOperationsInput | string
    desconto_off?: StringFieldUpdateOperationsInput | string
    catprod?: CatProdUpdateOneWithoutProductNestedInput
  }

  export type ProdutosUncheckedUpdateWithoutImgInput = {
    id?: IntFieldUpdateOperationsInput | number
    enabled?: NullableBoolFieldUpdateOperationsInput | boolean | null
    nome?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    estoque?: StringFieldUpdateOperationsInput | string
    descricao?: StringFieldUpdateOperationsInput | string
    preco?: StringFieldUpdateOperationsInput | string
    preco_desconto?: StringFieldUpdateOperationsInput | string
    desconto_off?: StringFieldUpdateOperationsInput | string
    catprod?: CatProdUncheckedUpdateOneWithoutProductNestedInput
  }

  export type ProdutosCreateWithoutCatprodInput = {
    enabled?: boolean | null
    nome: string
    slug: string
    estoque: string
    descricao: string
    preco: string
    preco_desconto: string
    desconto_off: string
    img?: ProdutosImgCreateNestedOneWithoutProductInput
  }

  export type ProdutosUncheckedCreateWithoutCatprodInput = {
    id?: number
    enabled?: boolean | null
    nome: string
    slug: string
    estoque: string
    descricao: string
    preco: string
    preco_desconto: string
    desconto_off: string
    img?: ProdutosImgUncheckedCreateNestedOneWithoutProductInput
  }

  export type ProdutosCreateOrConnectWithoutCatprodInput = {
    where: ProdutosWhereUniqueInput
    create: XOR<ProdutosCreateWithoutCatprodInput, ProdutosUncheckedCreateWithoutCatprodInput>
  }

  export type CategoriaCreateWithoutCatprodInput = {
    nome: string
    slug: string
  }

  export type CategoriaUncheckedCreateWithoutCatprodInput = {
    id?: number
    nome: string
    slug: string
  }

  export type CategoriaCreateOrConnectWithoutCatprodInput = {
    where: CategoriaWhereUniqueInput
    create: XOR<CategoriaCreateWithoutCatprodInput, CategoriaUncheckedCreateWithoutCatprodInput>
  }

  export type ProdutosUpsertWithoutCatprodInput = {
    update: XOR<ProdutosUpdateWithoutCatprodInput, ProdutosUncheckedUpdateWithoutCatprodInput>
    create: XOR<ProdutosCreateWithoutCatprodInput, ProdutosUncheckedCreateWithoutCatprodInput>
    where?: ProdutosWhereInput
  }

  export type ProdutosUpdateToOneWithWhereWithoutCatprodInput = {
    where?: ProdutosWhereInput
    data: XOR<ProdutosUpdateWithoutCatprodInput, ProdutosUncheckedUpdateWithoutCatprodInput>
  }

  export type ProdutosUpdateWithoutCatprodInput = {
    enabled?: NullableBoolFieldUpdateOperationsInput | boolean | null
    nome?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    estoque?: StringFieldUpdateOperationsInput | string
    descricao?: StringFieldUpdateOperationsInput | string
    preco?: StringFieldUpdateOperationsInput | string
    preco_desconto?: StringFieldUpdateOperationsInput | string
    desconto_off?: StringFieldUpdateOperationsInput | string
    img?: ProdutosImgUpdateOneWithoutProductNestedInput
  }

  export type ProdutosUncheckedUpdateWithoutCatprodInput = {
    id?: IntFieldUpdateOperationsInput | number
    enabled?: NullableBoolFieldUpdateOperationsInput | boolean | null
    nome?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    estoque?: StringFieldUpdateOperationsInput | string
    descricao?: StringFieldUpdateOperationsInput | string
    preco?: StringFieldUpdateOperationsInput | string
    preco_desconto?: StringFieldUpdateOperationsInput | string
    desconto_off?: StringFieldUpdateOperationsInput | string
    img?: ProdutosImgUncheckedUpdateOneWithoutProductNestedInput
  }

  export type CategoriaUpsertWithoutCatprodInput = {
    update: XOR<CategoriaUpdateWithoutCatprodInput, CategoriaUncheckedUpdateWithoutCatprodInput>
    create: XOR<CategoriaCreateWithoutCatprodInput, CategoriaUncheckedCreateWithoutCatprodInput>
    where?: CategoriaWhereInput
  }

  export type CategoriaUpdateToOneWithWhereWithoutCatprodInput = {
    where?: CategoriaWhereInput
    data: XOR<CategoriaUpdateWithoutCatprodInput, CategoriaUncheckedUpdateWithoutCatprodInput>
  }

  export type CategoriaUpdateWithoutCatprodInput = {
    nome?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
  }

  export type CategoriaUncheckedUpdateWithoutCatprodInput = {
    id?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
  }



  /**
   * Aliases for legacy arg types
   */
    /**
     * @deprecated Use UsersDefaultArgs instead
     */
    export type UsersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UsersDefaultArgs<ExtArgs>
    /**
     * @deprecated Use CartaoDefaultArgs instead
     */
    export type CartaoArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = CartaoDefaultArgs<ExtArgs>
    /**
     * @deprecated Use CategoriaDefaultArgs instead
     */
    export type CategoriaArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = CategoriaDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ProdutosDefaultArgs instead
     */
    export type ProdutosArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ProdutosDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ProdutosImgDefaultArgs instead
     */
    export type ProdutosImgArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ProdutosImgDefaultArgs<ExtArgs>
    /**
     * @deprecated Use CatProdDefaultArgs instead
     */
    export type CatProdArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = CatProdDefaultArgs<ExtArgs>

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}